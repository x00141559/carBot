{
    "alterations": {
        "className": "Alterations",
        "url": "/alterations",
        "operations": {
            "replaceAlterations": {
                "name": "replaceAlterations",
                "method": "PUT",
                "methodAlias": "replace",
                "target": [
                    "alterations"
                ],
                "command": "qnamaker replace alterations --in wordAlterations.json",
                "pathFragment": "",
                "description": "Replaces word alterations (synonyms) for the KB with the give records.",
                "entityName": "wordAlterations",
                "entityType": "WordAlterationsDTO"
            },
            "downloadAlterations": {
                "name": "downloadAlterations",
                "method": "GET",
                "methodAlias": "list",
                "target": [
                    "alterations"
                ],
                "command": "qnamaker list alterations",
                "pathFragment": "",
                "description": "Downloads all word alterations (synonyms) that have been automatically mined or added by the user."
            }
        }
    },
    "endpointkeys": {
        "className": "Endpointkeys",
        "url": "/endpointkeys",
        "operations": {
            "getEndpointKeys": {
                "name": "getEndpointKeys",
                "method": "GET",
                "methodAlias": "list",
                "target": [
                    "endpointkeys"
                ],
                "command": "qnamaker list endpointkeys",
                "pathFragment": "",
                "description": "list all the currently valid endpointKeys for querying your private endpoint"
            },
            "refreshEndpointKeys": {
                "name": "refreshEndpointKeys",
                "method": "PATCH",
                "methodAlias": "refresh",
                "target": [
                    "endpointkeys"
                ],
                "command": "qnamaker refresh endpointkeys --keyType <string>",
                "pathFragment": "",
                "params": [
                    {
                        "type": "string",
                        "name": "keyType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false,
                        "description": "type of Key"
                    }
                ],
                "description": "Re-generates an endpoint key, in case you suspect your keys have been compromised"
            }
        }
    },
    "knowledgebases": {
        "className": "Knowledgebases",
        "url": "/knowledgebases",
        "operations": {
            "getKnowledgebasesForUser": {
                "name": "getKnowledgebasesForUser",
                "method": "GET",
                "methodAlias": "list",
                "target": [
                    "kbs",
                    "knowledgebases",
                    "kb"
                ],
                "command": "qnamaker list kbs",
                "pathFragment": "",
                "description": "List all of your knowledgebases"
            }
        }
    },
    "knowledgebase": {
        "className": "Knowledgebase",
        "url": "/knowledgebases/{kbId}",
        "operations": {
            "replaceKnowledgebase": {
                "name": "replaceKnowledgebase",
                "method": "PUT",
                "methodAlias": "replace",
                "target": [
                    "kb",
                    "knowledgebase"
                ],
                "command": "qnamaker replace kb --in replaceKb.json --kbId <string>",
                "pathFragment": "",
                "params": [
                    {
                        "type": "string",
                        "name": "kbId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false,
                        "description": "Knowledgebase id"
                    }
                ],
                "description": "Replace a knowledgebase contents with new contents",
                "entityName": "replaceKb",
                "entityType": "ReplaceKbDTO"
            },
            "publishKnowledgebase": {
                "name": "publishKnowledgebase",
                "method": "POST",
                "methodAlias": "publish",
                "target": [
                    "kb",
                    "knowledgebase"
                ],
                "command": "qnamaker publish kb --kbId <string>",
                "pathFragment": "",
                "params": [
                    {
                        "type": "string",
                        "name": "kbId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false,
                        "description": "Knowledgebase id"
                    }
                ],
                "description": "Publish all unpublished in the knowledgebase to the prod endpoint"
            },
            "deleteKnowledgebase": {
                "name": "deleteKnowledgebase",
                "method": "DELETE",
                "methodAlias": "delete",
                "target": [
                    "kb",
                    "knowledgebase"
                ],
                "command": "qnamaker delete kb --kbId <string>",
                "pathFragment": "",
                "params": [
                    {
                        "type": "string",
                        "name": "kbId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false,
                        "description": "Knowledgebase id."
                    }
                ],
                "description": "Delete a knowledgebase by id"
            },
            "getKnowledgebaseDetails": {
                "name": "getKnowledgebaseDetails",
                "method": "GET",
                "methodAlias": "get",
                "target": [
                    "kb",
                    "knowledgebase"
                ],
                "command": "qnamaker get kb --kbId <string>",
                "pathFragment": "",
                "params": [
                    {
                        "type": "string",
                        "name": "kbId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false,
                        "description": "Knowledgebase id."
                    },
                    {
                        "type": "string",
                        "name": "environment",
                        "in": "path",
                        "required": false,
                        "x-nullable": false,
                        "default": "prod",
                        "description": "The environment [prod or test] default is prod"
                    }
                ],
                "description": "Get metadata about a knowledgebase"
            },
            "updateKnowledgebase": {
                "name": "updateKnowledgebase",
                "method": "PATCH",
                "methodAlias": "update",
                "target": [
                    "kb",
                    "knowledgebase"
                ],
                "command": "qnamaker update kb --in updateKb.json --kbId <string> [--wait]",
                "pathFragment": "",
                "params": [
                    {
                        "type": "string",
                        "name": "kbId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false,
                        "description": "Knowledgebase id"
                    },
                    {
                        "name": "wait",
                        "in": "path",
                        "description": "Wait for the operation to complete",
                        "required": false,
                        "type": "boolean",
                        "x-ms-parameter-location": "method"
                    }
                ],
                "description": "Add or delete QnA Pairs and / or URLs to an existing knowledge base",
                "entityName": "updateKb",
                "entityType": "UpdateKbOperationDTO"
            }
        }
    },
    "createasync": {
        "className": "Createasync",
        "url": "/knowledgebases/createasync",
        "operations": {
            "createKnowledgebase": {
                "name": "createKnowledgebase",
                "method": "POST",
                "methodAlias": "create",
                "target": [
                    "kb",
                    "knowledgebase"
                ],
                "params": [
                    {
                        "type": "string",
                        "name": "name",
                        "in": "path",
                        "required": false,
                        "x-nullable": false,
                        "description": "name of the kb you want to create"
                    },
                    {
                        "name": "wait",
                        "in": "path",
                        "description": "Wait for the operation to complete",
                        "required": false,
                        "type": "boolean",
                        "x-ms-parameter-location": "method"
                    }
                ],
                "command": "qnamaker create kb --in createKbPayload.json --name <kbname> [--wait]",
                "pathFragment": "",
                "description": "Create a new knowledgebase",
                "entityName": "createKbPayload",
                "entityType": "CreateKbDTO"
            }
        }
    },
    "generateAnswer": {
        "className": "GenerateAnswer",
        "url": "/qnamaker/knowledgebases/{kbId}/generateAnswer",
        "operations": {
            "generateAnswer": {
                "name": "generateAnswer",
                "method": "POST",
                "methodAlias": "query",
                "target": [],
                "command": "qnamaker query --question \"how do I turn it on\" --top 5",
                "pathFragment": "",
                "params": [
                    {
                        "name": "question",
                        "in": "question",
                        "description": "question you want to ask",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "top",
                        "in": "top",
                        "description": "number of answers you would like",
                        "required": false,
                        "type": "number"
                    },
                    {
                        "name": "kbId",
                        "alias": "knowledgeBaseID",
                        "in": "path",
                        "description": "kbId, this should be get from QnAMaker portal",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "hostname",
                        "alias": "hostname",
                        "in": "path",
                        "description": "the url of your private qnamaker service",
                        "required": true,
                        "type": "string"
                    }
                ],
                "description": "Returns the list of answers for the given question sorted in descending order of ranking score.",
                "entityName": "generateAnswer",
                "entityType": "GenerateAnswer"
            }
        }
    },
    "qna": {
        "className": "Qna",
        "url": "/knowledgebases/{kbId}/{environment}/qna",
        "operations": {
            "downloadKnowledgebase": {
                "name": "downloadKnowledgebase",
                "method": "GET",
                "methodAlias": "export",
                "target": [
                    "kb",
                    "knowledgebase"
                ],
                "command": "qnamaker export kb --kbId <string> --environment <string>",
                "pathFragment": "",
                "params": [
                    {
                        "type": "string",
                        "name": "kbId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false,
                        "description": "Knowledgebase id"
                    },
                    {
                        "type": "string",
                        "name": "environment",
                        "in": "path",
                        "required": true,
                        "x-schema": {
                            "$ref": "#/definitions/KnowledgebaseEnvironment"
                        },
                        "x-nullable": false,
                        "description": "Specifies whether environment is Test or Prod.",
                        "enum": [
                            "Prod",
                            "Test"
                        ]
                    }
                ],
                "description": "Export a knowledgebase to .json file"
            }
        }
    },
    "qnalegacy": {
        "className": "QnaLegacy",
        "url": "/knowledgebases/{kbId}",
        "operations": {
            "downloadLegacyKnowledgebase": {
                "name": "downloadLegacyKnowledgebase",
                "method": "get",
                "methodAlias": "export",
                "target": [
                    "legacykb",
                    "legacyknowledgebase"
                ],
                "command": "qnamaker export legacykb --kbId <legacyKB>",
                "pathFragment": "",
                "legacy": true,
                "params": [
                    {
                        "type": "string",
                        "name": "kbId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false,
                        "description": "legacy Knowledgebase id"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "path",
                        "required": false,
                        "x-nullable": false,
                        "description": "name of the knowledgebase. (NOTE: This is used to modify the output to be compliant with V4 import, not to lookup the knowledgebase)"
                    }
                ],
                "description": "Export legacy knowledgebase (requires legacy --kbid and --subscriptionKey to be passed in)"
            }
        }
    },
    "operations": {
        "className": "Operations",
        "url": "/operations/{operationId}",
        "operations": {
            "getOperationDetails": {
                "name": "getOperationDetails",
                "method": "GET",
                "methodAlias": "get",
                "target": [
                    "operationdetails",
                    "OperationDetails"
                ],
                "command": "qnamaker get operationdetails --operationId <string>",
                "pathFragment": "",
                "params": [
                    {
                        "type": "string",
                        "name": "operationId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false,
                        "description": "Operation id."
                    }
                ],
                "description": "Gets details of a specific long running operation."
            }
        }
    }
}