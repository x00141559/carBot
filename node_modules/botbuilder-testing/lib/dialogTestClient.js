"use strict";
/**
 * @module botbuilder-testing
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const botbuilder_core_1 = require("botbuilder-core");
const botbuilder_dialogs_1 = require("botbuilder-dialogs");
/**
 * A client for testing dialogs in isolation.
 */
class DialogTestClient {
    constructor(channelOrAdapter, targetDialog, initialDialogOptions, middlewares, conversationState) {
        this.conversationState = conversationState || new botbuilder_core_1.ConversationState(new botbuilder_core_1.MemoryStorage());
        let dialogState = this.conversationState.createProperty('DialogState');
        this._callback = this.getDefaultCallback(targetDialog, initialDialogOptions || null, dialogState);
        if (typeof channelOrAdapter == 'string') {
            const channelIdToUse = channelOrAdapter;
            this._testAdapter = new botbuilder_core_1.TestAdapter(this._callback, { channelId: channelIdToUse }).use(new botbuilder_core_1.AutoSaveStateMiddleware(this.conversationState));
        }
        else {
            const testAdapterToUse = channelOrAdapter;
            this._testAdapter = testAdapterToUse;
        }
        this.addUserMiddlewares(middlewares);
    }
    /**
     * Send an activity into the dialog.
     * @returns a TestFlow that can be used to assert replies etc
     * @param activity an activity potentially with text
     *
     * ```javascript
     * DialogTest.send('hello').assertReply('hello yourself').then(done);
     * ```
     */
    sendActivity(activity) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._testAdapter.receiveActivity(activity);
            return this._testAdapter.activityBuffer.shift();
        });
    }
    /**
     * Get the next reply waiting to be delivered (if one exists)
     */
    getNextReply() {
        return this._testAdapter.activityBuffer.shift();
    }
    getDefaultCallback(targetDialog, initialDialogOptions, dialogState) {
        return (turnContext) => __awaiter(this, void 0, void 0, function* () {
            const dialogSet = new botbuilder_dialogs_1.DialogSet(dialogState);
            dialogSet.add(targetDialog);
            const dialogContext = yield dialogSet.createContext(turnContext);
            this.dialogTurnResult = yield dialogContext.continueDialog();
            if (this.dialogTurnResult.status === botbuilder_dialogs_1.DialogTurnStatus.empty) {
                this.dialogTurnResult = yield dialogContext.beginDialog(targetDialog.id, initialDialogOptions);
            }
        });
    }
    addUserMiddlewares(middlewares) {
        if (middlewares != null) {
            middlewares.forEach((middleware) => {
                this._testAdapter.use(middleware);
            });
        }
    }
}
exports.DialogTestClient = DialogTestClient;
//# sourceMappingURL=dialogTestClient.js.map