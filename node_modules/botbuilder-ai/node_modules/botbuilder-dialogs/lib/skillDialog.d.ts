/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext } from 'botbuilder-core';
import { Dialog, DialogInstance, DialogReason, DialogTurnResult } from './dialog';
import { DialogContext } from './dialogContext';
import { SkillDialogOptions } from './skillDialogOptions';
export declare class SkillDialog extends Dialog {
    protected dialogOptions: SkillDialogOptions;
    private readonly DeliveryModeStateKey;
    /**
     * A sample dialog that can wrap remote calls to a skill.
     *
     * @remarks
     * The options parameter in `beginDialog()` must be a `SkillDialogArgs` object with the initial parameters
     * for the dialog.
     *
     * @param dialogOptions
     * @param dialogId
     */
    constructor(dialogOptions: SkillDialogOptions, dialogId?: string);
    beginDialog(dc: DialogContext, options?: any): Promise<DialogTurnResult>;
    continueDialog(dc: DialogContext): Promise<DialogTurnResult>;
    endDialog(context: TurnContext, instance: DialogInstance, reason: DialogReason): Promise<void>;
    repromptDialog(context: TurnContext, instance: DialogInstance): Promise<void>;
    resumeDialog(dc: DialogContext, reason: DialogReason, result?: any): Promise<DialogTurnResult>;
    /**
     * Clones the Activity entity.
     * @param activity Activity to clone.
     */
    private cloneActivity;
    private static validateBeginDialogArgs;
    private sendToSkill;
}
//# sourceMappingURL=skillDialog.d.ts.map