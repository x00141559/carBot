/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity } from 'botbuilder-core';
import { WaterfallDialog, DialogTurnResult, DialogContext } from 'botbuilder-dialogs';
import { QnAMakerOptions } from './qnamaker-interfaces/qnamakerOptions';
import { QnAMakerMetadata } from './qnamaker-interfaces';
/**
 * QnAMakerDialog response options.
 */
export interface QnAMakerDialogResponseOptions {
    /**
    * Title for active learning card.
    */
    activeLearningCardTitle: string;
    /**
    * Text shown for 'no match' option on active learning card.
    */
    cardNoMatchText: string;
    /**
    * Activity to be sent in the event of no answer found in KB.
    */
    noAnswer: Activity;
    /**
    * Activity to be sent in the end that the 'no match' option is selected on active learning card.
    */
    cardNoMatchResponse: Activity;
}
/**
 * Options for QnAMakerDialog.
 */
export interface QnAMakerDialogOptions {
    /**
    * Options for QnAMaker knowledgebase.
    */
    qnaMakerOptions: QnAMakerOptions;
    /**
    * QnAMakerDialog response options.
    */
    qnaDialogResponseOptions: QnAMakerDialogResponseOptions;
}
/**
 * Query QnAMaker knowledgebase using user utterance. The dialog will also present user with appropriate multi-turn prompt or active learning options.
 */
export declare class QnAMakerDialog extends WaterfallDialog {
    private qnAContextData;
    private previousQnAId;
    private options;
    private qnAData;
    private currentQuery;
    private defaultCardNoMatchResponse;
    private defaultNoAnswer;
    private maximumScoreForLowScoreVariation;
    private knowledgeBaseId;
    private hostName;
    private endpointKey;
    private threshold;
    private top;
    private noAnswer;
    private activeLearningCardTitle;
    private cardNoMatchText;
    private strintFilters;
    private cardNoMatchResponse;
    /**
     * Creates a new QnAMakerDialog instance.
     * @param knowledgeBaseId The Id of the QnAMaker knowledgebase to be queried.
     * @param endpointKey The endpoint key to use when querying the knowledgebase.
     * @param hostName Hostname to be used to form the QnAMaker host URL, which follows the following format https://{hostName}.azurewebsites.net/qnamaker
     * @param noAnswer (Optional) Activity to be sent in the event no answer is found within the knowledgebase.
     * @param threshold (Optional) The threshold above which to treat answers found from the knowledgebase as a match.
     * @param activeLearningCardTitle (Optional) Title of the card displayed showing active learning options if active learning is enabled.
     * @param cardNoMatchText (Optional) Text to be show on a button alongside active learning options, allowing a user to indicate none of the options are applicable.
     * @param top (Optional) Maximum number of answers to return from the knowledgebase.
     * @param cardNoMatchResponse (Optional) Activity to be sent if the user selects the no match option on an active learning card.
     * @param strictFilters (Optional) QnAMakerMetadata collection used to filter / boost queries to the knowledgebase.
     * @param dialogId (Optional) Id of the created dialog. Default is 'QnAMakerDialog'.
     */
    constructor(knowledgeBaseId: string, endpointKey: string, hostName: string, noAnswer?: Activity, threshold?: number, activeLearningCardTitle?: string, cardNoMatchText?: string, top?: number, cardNoMatchResponse?: Activity, strictFilters?: QnAMakerMetadata[], dialogId?: string);
    beginDialog(dc: DialogContext, options?: object): Promise<DialogTurnResult>;
    /**
     * Returns a new instance of QnAMakerOptions.
    **/
    private getQnAMakerOptions;
    /**
     * Returns a new instance of QnAMakerResponseOptions.
    **/
    private getQnAResponseOptions;
    /**
     * Queries the knowledgebase and either passes result to the next step or constructs and displays an active learning card
     * if active learning is enabled and multiple score close answers are returned.
    **/
    private callGenerateAnswer;
    /**
     * If active learning options were displayed in the previous step and the user has selected an option other
     * than 'no match' then the training API is called, passing the user's chosen question back to the knowledgebase.
     * If no active learning options were displayed in the previous step, the incoming result is immediately passed to the next step.
    **/
    private callTrain;
    /**
     * If multi turn prompts are included with the answer returned from the knowledgebase, this step constructs
     * and sends an activity with a hero card displaying the answer and the multi turn prompt options.
     * If no multi turn prompts exist then the result incoming result is passed to the next step.
    **/
    private checkForMultiTurnPrompt;
    /**
     * Displays an appropriate response based on the incoming result to the user.If an answer has been identified it
     * is sent to the user. Alternatively, if no answer has been identified or the user has indicated 'no match' on an
     * active learning card, then an appropriate message is sent to the user.
    **/
    private displayQnAResult;
    /**
     * Creates and returns an instance of the QnAMaker class used to query the knowledgebase.
    **/
    private getQnAClient;
}
//# sourceMappingURL=qnaMakerDialog.d.ts.map