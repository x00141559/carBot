import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { LuisAuthoringContext } from "../luisAuthoringContext";
/** Class representing a Permissions. */
export declare class Permissions {
    private readonly client;
    /**
     * Create a Permissions.
     * @param {LuisAuthoringContext} client Reference to the service client.
     */
    constructor(client: LuisAuthoringContext);
    /**
     * Gets the list of user emails that have permissions to access your application.
     * @param appId The application ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.PermissionsListResponse>
     */
    list(appId: string, options?: msRest.RequestOptionsBase): Promise<Models.PermissionsListResponse>;
    /**
     * @param appId The application ID.
     * @param callback The callback
     */
    list(appId: string, callback: msRest.ServiceCallback<Models.UserAccessList>): void;
    /**
     * @param appId The application ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserAccessList>): void;
    /**
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using
     * their email address.
     * @param appId The application ID.
     * @param userToAdd A model containing the user's email address.
     * @param [options] The optional parameters
     * @returns Promise<Models.PermissionsAddResponse>
     */
    add(appId: string, userToAdd: Models.UserCollaborator, options?: msRest.RequestOptionsBase): Promise<Models.PermissionsAddResponse>;
    /**
     * @param appId The application ID.
     * @param userToAdd A model containing the user's email address.
     * @param callback The callback
     */
    add(appId: string, userToAdd: Models.UserCollaborator, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param userToAdd A model containing the user's email address.
     * @param options The optional parameters
     * @param callback The callback
     */
    add(appId: string, userToAdd: Models.UserCollaborator, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed
     * using their email address.
     * @param appId The application ID.
     * @param userToDelete A model containing the user's email address.
     * @param [options] The optional parameters
     * @returns Promise<Models.PermissionsDeleteMethodResponse>
     */
    deleteMethod(appId: string, userToDelete: Models.UserCollaborator, options?: msRest.RequestOptionsBase): Promise<Models.PermissionsDeleteMethodResponse>;
    /**
     * @param appId The application ID.
     * @param userToDelete A model containing the user's email address.
     * @param callback The callback
     */
    deleteMethod(appId: string, userToDelete: Models.UserCollaborator, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param userToDelete A model containing the user's email address.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(appId: string, userToDelete: Models.UserCollaborator, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Replaces the current user access list with the new list sent in the body. If an empty list is
     * sent, all access to other users will be removed.
     * @param appId The application ID.
     * @param collaborators A model containing a list of user email addresses.
     * @param [options] The optional parameters
     * @returns Promise<Models.PermissionsUpdateResponse>
     */
    update(appId: string, collaborators: Models.CollaboratorsArray, options?: msRest.RequestOptionsBase): Promise<Models.PermissionsUpdateResponse>;
    /**
     * @param appId The application ID.
     * @param collaborators A model containing a list of user email addresses.
     * @param callback The callback
     */
    update(appId: string, collaborators: Models.CollaboratorsArray, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param collaborators A model containing a list of user email addresses.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(appId: string, collaborators: Models.CollaboratorsArray, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
}
