import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { LuisAuthoringContext } from "../luisAuthoringContext";
/** Class representing a Train. */
export declare class Train {
    private readonly client;
    /**
     * Create a Train.
     * @param {LuisAuthoringContext} client Reference to the service client.
     */
    constructor(client: LuisAuthoringContext);
    /**
     * Sends a training request for a version of a specified LUIS app. This POST request initiates a
     * request asynchronously. To determine whether the training request is successful, submit a GET
     * request to get training status. Note: The application version is not fully trained unless all
     * the models (intents and entities) are trained successfully or are up to date. To verify training
     * success, get the training status at least once after training is complete.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.TrainTrainVersionResponse>
     */
    trainVersion(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.TrainTrainVersionResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    trainVersion(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.EnqueueTrainingResponse>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    trainVersion(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EnqueueTrainingResponse>): void;
    /**
     * Gets the training status of all models (intents and entities) for the specified LUIS app. You
     * must call the train API to train the LUIS app before you call this API to get training status.
     * "appID" specifies the LUIS app ID. "versionId" specifies the version number of the LUIS app. For
     * example, "0.1".
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.TrainGetStatusResponse>
     */
    getStatus(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.TrainGetStatusResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    getStatus(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.ModelTrainingInfo[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getStatus(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ModelTrainingInfo[]>): void;
}
