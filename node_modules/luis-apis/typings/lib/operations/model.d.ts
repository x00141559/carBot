import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { LuisAuthoringContext } from "../luisAuthoringContext";
/** Class representing a Model. */
export declare class Model {
    private readonly client;
    /**
     * Create a Model.
     * @param {LuisAuthoringContext} client Reference to the service client.
     */
    constructor(client: LuisAuthoringContext);
    /**
     * Adds an intent to a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentCreateObject A model object containing the name of the new intent.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddIntentResponse>
     */
    addIntent(appId: string, versionId: string, intentCreateObject: Models.ModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddIntentResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentCreateObject A model object containing the name of the new intent.
     * @param callback The callback
     */
    addIntent(appId: string, versionId: string, intentCreateObject: Models.ModelCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentCreateObject A model object containing the name of the new intent.
     * @param options The optional parameters
     * @param callback The callback
     */
    addIntent(appId: string, versionId: string, intentCreateObject: Models.ModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Gets information about the intent models in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListIntentsResponse>
     */
    listIntents(appId: string, versionId: string, options?: Models.ModelListIntentsOptionalParams): Promise<Models.ModelListIntentsResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listIntents(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.IntentClassifier[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listIntents(appId: string, versionId: string, options: Models.ModelListIntentsOptionalParams, callback: msRest.ServiceCallback<Models.IntentClassifier[]>): void;
    /**
     * Adds a simple entity extractor to a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param modelCreateObject A model object containing the name for the new simple entity extractor.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddEntityResponse>
     */
    addEntity(appId: string, versionId: string, modelCreateObject: Models.ModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param modelCreateObject A model object containing the name for the new simple entity extractor.
     * @param callback The callback
     */
    addEntity(appId: string, versionId: string, modelCreateObject: Models.ModelCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param modelCreateObject A model object containing the name for the new simple entity extractor.
     * @param options The optional parameters
     * @param callback The callback
     */
    addEntity(appId: string, versionId: string, modelCreateObject: Models.ModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Gets information about all the simple entity models in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListEntitiesResponse>
     */
    listEntities(appId: string, versionId: string, options?: Models.ModelListEntitiesOptionalParams): Promise<Models.ModelListEntitiesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listEntities(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.EntityExtractor[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listEntities(appId: string, versionId: string, options: Models.ModelListEntitiesOptionalParams, callback: msRest.ServiceCallback<Models.EntityExtractor[]>): void;
    /**
     * Adds a hierarchical entity extractor to a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity
     * extractor.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddHierarchicalEntityResponse>
     */
    addHierarchicalEntity(appId: string, versionId: string, hierarchicalModelCreateObject: Models.HierarchicalEntityModel, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddHierarchicalEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity
     * extractor.
     * @param callback The callback
     */
    addHierarchicalEntity(appId: string, versionId: string, hierarchicalModelCreateObject: Models.HierarchicalEntityModel, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity
     * extractor.
     * @param options The optional parameters
     * @param callback The callback
     */
    addHierarchicalEntity(appId: string, versionId: string, hierarchicalModelCreateObject: Models.HierarchicalEntityModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Gets information about all the hierarchical entity models in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListHierarchicalEntitiesResponse>
     */
    listHierarchicalEntities(appId: string, versionId: string, options?: Models.ModelListHierarchicalEntitiesOptionalParams): Promise<Models.ModelListHierarchicalEntitiesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listHierarchicalEntities(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.HierarchicalEntityExtractor[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHierarchicalEntities(appId: string, versionId: string, options: Models.ModelListHierarchicalEntitiesOptionalParams, callback: msRest.ServiceCallback<Models.HierarchicalEntityExtractor[]>): void;
    /**
     * Adds a composite entity extractor to a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param compositeModelCreateObject A model containing the name and children of the new entity
     * extractor.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddCompositeEntityResponse>
     */
    addCompositeEntity(appId: string, versionId: string, compositeModelCreateObject: Models.CompositeEntityModel, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddCompositeEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param compositeModelCreateObject A model containing the name and children of the new entity
     * extractor.
     * @param callback The callback
     */
    addCompositeEntity(appId: string, versionId: string, compositeModelCreateObject: Models.CompositeEntityModel, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param compositeModelCreateObject A model containing the name and children of the new entity
     * extractor.
     * @param options The optional parameters
     * @param callback The callback
     */
    addCompositeEntity(appId: string, versionId: string, compositeModelCreateObject: Models.CompositeEntityModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Gets information about all the composite entity models in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListCompositeEntitiesResponse>
     */
    listCompositeEntities(appId: string, versionId: string, options?: Models.ModelListCompositeEntitiesOptionalParams): Promise<Models.ModelListCompositeEntitiesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listCompositeEntities(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.CompositeEntityExtractor[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listCompositeEntities(appId: string, versionId: string, options: Models.ModelListCompositeEntitiesOptionalParams, callback: msRest.ServiceCallback<Models.CompositeEntityExtractor[]>): void;
    /**
     * Gets information about all the list entity models in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListClosedListsResponse>
     */
    listClosedLists(appId: string, versionId: string, options?: Models.ModelListClosedListsOptionalParams): Promise<Models.ModelListClosedListsResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listClosedLists(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.ClosedListEntityExtractor[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listClosedLists(appId: string, versionId: string, options: Models.ModelListClosedListsOptionalParams, callback: msRest.ServiceCallback<Models.ClosedListEntityExtractor[]>): void;
    /**
     * Adds a list entity model to a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param closedListModelCreateObject A model containing the name and words for the new list entity
     * extractor.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddClosedListResponse>
     */
    addClosedList(appId: string, versionId: string, closedListModelCreateObject: Models.ClosedListModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddClosedListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param closedListModelCreateObject A model containing the name and words for the new list entity
     * extractor.
     * @param callback The callback
     */
    addClosedList(appId: string, versionId: string, closedListModelCreateObject: Models.ClosedListModelCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param closedListModelCreateObject A model containing the name and words for the new list entity
     * extractor.
     * @param options The optional parameters
     * @param callback The callback
     */
    addClosedList(appId: string, versionId: string, closedListModelCreateObject: Models.ClosedListModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Adds a list of prebuilt entities to a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddPrebuiltResponse>
     */
    addPrebuilt(appId: string, versionId: string, prebuiltExtractorNames: string[], options?: msRest.RequestOptionsBase): Promise<Models.ModelAddPrebuiltResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @param callback The callback
     */
    addPrebuilt(appId: string, versionId: string, prebuiltExtractorNames: string[], callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @param options The optional parameters
     * @param callback The callback
     */
    addPrebuilt(appId: string, versionId: string, prebuiltExtractorNames: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>): void;
    /**
     * Gets information about all the prebuilt entities in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListPrebuiltsResponse>
     */
    listPrebuilts(appId: string, versionId: string, options?: Models.ModelListPrebuiltsOptionalParams): Promise<Models.ModelListPrebuiltsResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listPrebuilts(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPrebuilts(appId: string, versionId: string, options: Models.ModelListPrebuiltsOptionalParams, callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>): void;
    /**
     * Gets all the available prebuilt entities in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListPrebuiltEntitiesResponse>
     */
    listPrebuiltEntities(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListPrebuiltEntitiesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listPrebuiltEntities(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.AvailablePrebuiltEntityModel[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPrebuiltEntities(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AvailablePrebuiltEntityModel[]>): void;
    /**
     * Gets information about all the intent and entity models in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListModelsResponse>
     */
    listModels(appId: string, versionId: string, options?: Models.ModelListModelsOptionalParams): Promise<Models.ModelListModelsResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listModels(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.ModelInfoResponse[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listModels(appId: string, versionId: string, options: Models.ModelListModelsOptionalParams, callback: msRest.ServiceCallback<Models.ModelInfoResponse[]>): void;
    /**
     * Gets the example utterances for the given intent or entity model in a version of the
     * application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param modelId The ID (GUID) of the model.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelExamplesMethodResponse>
     */
    examplesMethod(appId: string, versionId: string, modelId: string, options?: Models.ModelExamplesMethodOptionalParams): Promise<Models.ModelExamplesMethodResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param modelId The ID (GUID) of the model.
     * @param callback The callback
     */
    examplesMethod(appId: string, versionId: string, modelId: string, callback: msRest.ServiceCallback<Models.LabelTextObject[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param modelId The ID (GUID) of the model.
     * @param options The optional parameters
     * @param callback The callback
     */
    examplesMethod(appId: string, versionId: string, modelId: string, options: Models.ModelExamplesMethodOptionalParams, callback: msRest.ServiceCallback<Models.LabelTextObject[]>): void;
    /**
     * Gets information about the intent model in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetIntentResponse>
     */
    getIntent(appId: string, versionId: string, intentId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetIntentResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param callback The callback
     */
    getIntent(appId: string, versionId: string, intentId: string, callback: msRest.ServiceCallback<Models.IntentClassifier>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getIntent(appId: string, versionId: string, intentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IntentClassifier>): void;
    /**
     * Updates the name of an intent in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param modelUpdateObject A model object containing the new intent name.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateIntentResponse>
     */
    updateIntent(appId: string, versionId: string, intentId: string, modelUpdateObject: Models.ModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateIntentResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param modelUpdateObject A model object containing the new intent name.
     * @param callback The callback
     */
    updateIntent(appId: string, versionId: string, intentId: string, modelUpdateObject: Models.ModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param modelUpdateObject A model object containing the new intent name.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateIntent(appId: string, versionId: string, intentId: string, modelUpdateObject: Models.ModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Deletes an intent from a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteIntentResponse>
     */
    deleteIntent(appId: string, versionId: string, intentId: string, options?: Models.ModelDeleteIntentOptionalParams): Promise<Models.ModelDeleteIntentResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param callback The callback
     */
    deleteIntent(appId: string, versionId: string, intentId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteIntent(appId: string, versionId: string, intentId: string, options: Models.ModelDeleteIntentOptionalParams, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Gets information about an entity model in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetEntityResponse>
     */
    getEntity(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param callback The callback
     */
    getEntity(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityExtractor>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntity(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityExtractor>): void;
    /**
     * Updates the name of an entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param modelUpdateObject A model object containing the new entity extractor name.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateEntityResponse>
     */
    updateEntity(appId: string, versionId: string, entityId: string, modelUpdateObject: Models.ModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param modelUpdateObject A model object containing the new entity extractor name.
     * @param callback The callback
     */
    updateEntity(appId: string, versionId: string, entityId: string, modelUpdateObject: Models.ModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param modelUpdateObject A model object containing the new entity extractor name.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateEntity(appId: string, versionId: string, entityId: string, modelUpdateObject: Models.ModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Deletes an entity from a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteEntityResponse>
     */
    deleteEntity(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param callback The callback
     */
    deleteEntity(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteEntity(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Gets information about a hierarchical entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetHierarchicalEntityResponse>
     */
    getHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetHierarchicalEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param callback The callback
     */
    getHierarchicalEntity(appId: string, versionId: string, hEntityId: string, callback: msRest.ServiceCallback<Models.HierarchicalEntityExtractor>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HierarchicalEntityExtractor>): void;
    /**
     * Updates the name and children of a hierarchical entity model in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical
     * entity.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateHierarchicalEntityResponse>
     */
    updateHierarchicalEntity(appId: string, versionId: string, hEntityId: string, hierarchicalModelUpdateObject: Models.HierarchicalEntityModel, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateHierarchicalEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical
     * entity.
     * @param callback The callback
     */
    updateHierarchicalEntity(appId: string, versionId: string, hEntityId: string, hierarchicalModelUpdateObject: Models.HierarchicalEntityModel, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical
     * entity.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateHierarchicalEntity(appId: string, versionId: string, hEntityId: string, hierarchicalModelUpdateObject: Models.HierarchicalEntityModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Deletes a hierarchical entity from a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteHierarchicalEntityResponse>
     */
    deleteHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteHierarchicalEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param callback The callback
     */
    deleteHierarchicalEntity(appId: string, versionId: string, hEntityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Gets information about a composite entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetCompositeEntityResponse>
     */
    getCompositeEntity(appId: string, versionId: string, cEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetCompositeEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param callback The callback
     */
    getCompositeEntity(appId: string, versionId: string, cEntityId: string, callback: msRest.ServiceCallback<Models.CompositeEntityExtractor>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getCompositeEntity(appId: string, versionId: string, cEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CompositeEntityExtractor>): void;
    /**
     * Updates a composite entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and
     * children.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateCompositeEntityResponse>
     */
    updateCompositeEntity(appId: string, versionId: string, cEntityId: string, compositeModelUpdateObject: Models.CompositeEntityModel, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateCompositeEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and
     * children.
     * @param callback The callback
     */
    updateCompositeEntity(appId: string, versionId: string, cEntityId: string, compositeModelUpdateObject: Models.CompositeEntityModel, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and
     * children.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateCompositeEntity(appId: string, versionId: string, cEntityId: string, compositeModelUpdateObject: Models.CompositeEntityModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Deletes a composite entity from a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteCompositeEntityResponse>
     */
    deleteCompositeEntity(appId: string, versionId: string, cEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteCompositeEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param callback The callback
     */
    deleteCompositeEntity(appId: string, versionId: string, cEntityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteCompositeEntity(appId: string, versionId: string, cEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Gets information about a list entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list model ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetClosedListResponse>
     */
    getClosedList(appId: string, versionId: string, clEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetClosedListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list model ID.
     * @param callback The callback
     */
    getClosedList(appId: string, versionId: string, clEntityId: string, callback: msRest.ServiceCallback<Models.ClosedListEntityExtractor>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list model ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getClosedList(appId: string, versionId: string, clEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClosedListEntityExtractor>): void;
    /**
     * Updates the list entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list model ID.
     * @param closedListModelUpdateObject The new list entity name and words list.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateClosedListResponse>
     */
    updateClosedList(appId: string, versionId: string, clEntityId: string, closedListModelUpdateObject: Models.ClosedListModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateClosedListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list model ID.
     * @param closedListModelUpdateObject The new list entity name and words list.
     * @param callback The callback
     */
    updateClosedList(appId: string, versionId: string, clEntityId: string, closedListModelUpdateObject: Models.ClosedListModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list model ID.
     * @param closedListModelUpdateObject The new list entity name and words list.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateClosedList(appId: string, versionId: string, clEntityId: string, closedListModelUpdateObject: Models.ClosedListModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Adds a batch of sublists to an existing list entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity model ID.
     * @param closedListModelPatchObject A words list batch.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelPatchClosedListResponse>
     */
    patchClosedList(appId: string, versionId: string, clEntityId: string, closedListModelPatchObject: Models.ClosedListModelPatchObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelPatchClosedListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity model ID.
     * @param closedListModelPatchObject A words list batch.
     * @param callback The callback
     */
    patchClosedList(appId: string, versionId: string, clEntityId: string, closedListModelPatchObject: Models.ClosedListModelPatchObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity model ID.
     * @param closedListModelPatchObject A words list batch.
     * @param options The optional parameters
     * @param callback The callback
     */
    patchClosedList(appId: string, versionId: string, clEntityId: string, closedListModelPatchObject: Models.ClosedListModelPatchObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Deletes a list entity model from a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity model ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteClosedListResponse>
     */
    deleteClosedList(appId: string, versionId: string, clEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteClosedListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity model ID.
     * @param callback The callback
     */
    deleteClosedList(appId: string, versionId: string, clEntityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity model ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteClosedList(appId: string, versionId: string, clEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Gets information about a prebuilt entity model in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetPrebuiltResponse>
     */
    getPrebuilt(appId: string, versionId: string, prebuiltId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetPrebuiltResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @param callback The callback
     */
    getPrebuilt(appId: string, versionId: string, prebuiltId: string, callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPrebuilt(appId: string, versionId: string, prebuiltId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor>): void;
    /**
     * Deletes a prebuilt entity extractor from a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeletePrebuiltResponse>
     */
    deletePrebuilt(appId: string, versionId: string, prebuiltId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeletePrebuiltResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @param callback The callback
     */
    deletePrebuilt(appId: string, versionId: string, prebuiltId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deletePrebuilt(appId: string, versionId: string, prebuiltId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Deletes a sublist of a specific list entity model from a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity extractor ID.
     * @param subListId The sublist ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteSubListResponse>
     */
    deleteSubList(appId: string, versionId: string, clEntityId: string, subListId: number, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteSubListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity extractor ID.
     * @param subListId The sublist ID.
     * @param callback The callback
     */
    deleteSubList(appId: string, versionId: string, clEntityId: string, subListId: number, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity extractor ID.
     * @param subListId The sublist ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteSubList(appId: string, versionId: string, clEntityId: string, subListId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Updates one of the list entity's sublists in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity extractor ID.
     * @param subListId The sublist ID.
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and
     * the list of words.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateSubListResponse>
     */
    updateSubList(appId: string, versionId: string, clEntityId: string, subListId: number, wordListBaseUpdateObject: Models.WordListBaseUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateSubListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity extractor ID.
     * @param subListId The sublist ID.
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and
     * the list of words.
     * @param callback The callback
     */
    updateSubList(appId: string, versionId: string, clEntityId: string, subListId: number, wordListBaseUpdateObject: Models.WordListBaseUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity extractor ID.
     * @param subListId The sublist ID.
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and
     * the list of words.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateSubList(appId: string, versionId: string, clEntityId: string, subListId: number, wordListBaseUpdateObject: Models.WordListBaseUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Suggests example utterances that would improve the accuracy of the intent model in a version of
     * the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListIntentSuggestionsResponse>
     */
    listIntentSuggestions(appId: string, versionId: string, intentId: string, options?: Models.ModelListIntentSuggestionsOptionalParams): Promise<Models.ModelListIntentSuggestionsResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param callback The callback
     */
    listIntentSuggestions(appId: string, versionId: string, intentId: string, callback: msRest.ServiceCallback<Models.IntentsSuggestionExample[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listIntentSuggestions(appId: string, versionId: string, intentId: string, options: Models.ModelListIntentSuggestionsOptionalParams, callback: msRest.ServiceCallback<Models.IntentsSuggestionExample[]>): void;
    /**
     * Get suggested example utterances that would improve the accuracy of the entity model in a
     * version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListEntitySuggestionsResponse>
     */
    listEntitySuggestions(appId: string, versionId: string, entityId: string, options?: Models.ModelListEntitySuggestionsOptionalParams): Promise<Models.ModelListEntitySuggestionsResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param callback The callback
     */
    listEntitySuggestions(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntitiesSuggestionExample[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param options The optional parameters
     * @param callback The callback
     */
    listEntitySuggestions(appId: string, versionId: string, entityId: string, options: Models.ModelListEntitySuggestionsOptionalParams, callback: msRest.ServiceCallback<Models.EntitiesSuggestionExample[]>): void;
    /**
     * Adds a sublist to an existing list entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity extractor ID.
     * @param wordListCreateObject Words list.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddSubListResponse>
     */
    addSubList(appId: string, versionId: string, clEntityId: string, wordListCreateObject: Models.WordListObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddSubListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity extractor ID.
     * @param wordListCreateObject Words list.
     * @param callback The callback
     */
    addSubList(appId: string, versionId: string, clEntityId: string, wordListCreateObject: Models.WordListObject, callback: msRest.ServiceCallback<number>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The list entity extractor ID.
     * @param wordListCreateObject Words list.
     * @param options The optional parameters
     * @param callback The callback
     */
    addSubList(appId: string, versionId: string, clEntityId: string, wordListCreateObject: Models.WordListObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
    /**
     * Adds a customizable prebuilt domain along with all of its intent and entity models in a version
     * of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainObject A prebuilt domain create object containing the name of the domain.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddCustomPrebuiltDomainResponse>
     */
    addCustomPrebuiltDomain(appId: string, versionId: string, prebuiltDomainObject: Models.PrebuiltDomainCreateBaseObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddCustomPrebuiltDomainResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainObject A prebuilt domain create object containing the name of the domain.
     * @param callback The callback
     */
    addCustomPrebuiltDomain(appId: string, versionId: string, prebuiltDomainObject: Models.PrebuiltDomainCreateBaseObject, callback: msRest.ServiceCallback<string[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainObject A prebuilt domain create object containing the name of the domain.
     * @param options The optional parameters
     * @param callback The callback
     */
    addCustomPrebuiltDomain(appId: string, versionId: string, prebuiltDomainObject: Models.PrebuiltDomainCreateBaseObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
    /**
     * Adds a customizable prebuilt intent model to a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the customizable
     * prebuilt intent and the name of the domain to which this model belongs.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddCustomPrebuiltIntentResponse>
     */
    addCustomPrebuiltIntent(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddCustomPrebuiltIntentResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the customizable
     * prebuilt intent and the name of the domain to which this model belongs.
     * @param callback The callback
     */
    addCustomPrebuiltIntent(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the customizable
     * prebuilt intent and the name of the domain to which this model belongs.
     * @param options The optional parameters
     * @param callback The callback
     */
    addCustomPrebuiltIntent(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Gets information about customizable prebuilt intents added to a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListCustomPrebuiltIntentsResponse>
     */
    listCustomPrebuiltIntents(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListCustomPrebuiltIntentsResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listCustomPrebuiltIntents(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.IntentClassifier[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listCustomPrebuiltIntents(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IntentClassifier[]>): void;
    /**
     * Adds a prebuilt entity model to a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the prebuilt entity
     * and the name of the domain to which this model belongs.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddCustomPrebuiltEntityResponse>
     */
    addCustomPrebuiltEntity(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddCustomPrebuiltEntityResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the prebuilt entity
     * and the name of the domain to which this model belongs.
     * @param callback The callback
     */
    addCustomPrebuiltEntity(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the prebuilt entity
     * and the name of the domain to which this model belongs.
     * @param options The optional parameters
     * @param callback The callback
     */
    addCustomPrebuiltEntity(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Gets all prebuilt entities used in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListCustomPrebuiltEntitiesResponse>
     */
    listCustomPrebuiltEntities(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListCustomPrebuiltEntitiesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listCustomPrebuiltEntities(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.EntityExtractor[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listCustomPrebuiltEntities(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityExtractor[]>): void;
    /**
     * Gets all prebuilt intent and entity model information used in a version of this application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListCustomPrebuiltModelsResponse>
     */
    listCustomPrebuiltModels(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListCustomPrebuiltModelsResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listCustomPrebuiltModels(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.CustomPrebuiltModel[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listCustomPrebuiltModels(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomPrebuiltModel[]>): void;
    /**
     * Deletes a prebuilt domain's models in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName Domain name.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteCustomPrebuiltDomainResponse>
     */
    deleteCustomPrebuiltDomain(appId: string, versionId: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteCustomPrebuiltDomainResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName Domain name.
     * @param callback The callback
     */
    deleteCustomPrebuiltDomain(appId: string, versionId: string, domainName: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName Domain name.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteCustomPrebuiltDomain(appId: string, versionId: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Gets information about the child's model contained in an hierarchical entity child model in a
     * version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetHierarchicalEntityChildResponse>
     */
    getHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetHierarchicalEntityChildResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param callback The callback
     */
    getHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, callback: msRest.ServiceCallback<Models.HierarchicalChildEntity>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HierarchicalChildEntity>): void;
    /**
     * Renames a single child in an existing hierarchical entity model in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param hierarchicalChildModelUpdateObject Model object containing new name of the hierarchical
     * entity child.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateHierarchicalEntityChildResponse>
     */
    updateHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, hierarchicalChildModelUpdateObject: Models.HierarchicalChildModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateHierarchicalEntityChildResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param hierarchicalChildModelUpdateObject Model object containing new name of the hierarchical
     * entity child.
     * @param callback The callback
     */
    updateHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, hierarchicalChildModelUpdateObject: Models.HierarchicalChildModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param hierarchicalChildModelUpdateObject Model object containing new name of the hierarchical
     * entity child.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, hierarchicalChildModelUpdateObject: Models.HierarchicalChildModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Deletes a hierarchical entity extractor child in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteHierarchicalEntityChildResponse>
     */
    deleteHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteHierarchicalEntityChildResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param callback The callback
     */
    deleteHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Creates a single child in an existing hierarchical entity model in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalChildModelCreateObject A model object containing the name of the new
     * hierarchical child model.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddHierarchicalEntityChildResponse>
     */
    addHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hierarchicalChildModelCreateObject: Models.HierarchicalChildModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddHierarchicalEntityChildResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalChildModelCreateObject A model object containing the name of the new
     * hierarchical child model.
     * @param callback The callback
     */
    addHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hierarchicalChildModelCreateObject: Models.HierarchicalChildModelCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalChildModelCreateObject A model object containing the name of the new
     * hierarchical child model.
     * @param options The optional parameters
     * @param callback The callback
     */
    addHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hierarchicalChildModelCreateObject: Models.HierarchicalChildModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Creates a single child in an existing composite entity model in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeChildModelCreateObject A model object containing the name of the new composite
     * child model.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddCompositeEntityChildResponse>
     */
    addCompositeEntityChild(appId: string, versionId: string, cEntityId: string, compositeChildModelCreateObject: Models.CompositeChildModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddCompositeEntityChildResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeChildModelCreateObject A model object containing the name of the new composite
     * child model.
     * @param callback The callback
     */
    addCompositeEntityChild(appId: string, versionId: string, cEntityId: string, compositeChildModelCreateObject: Models.CompositeChildModelCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeChildModelCreateObject A model object containing the name of the new composite
     * child model.
     * @param options The optional parameters
     * @param callback The callback
     */
    addCompositeEntityChild(appId: string, versionId: string, cEntityId: string, compositeChildModelCreateObject: Models.CompositeChildModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Deletes a composite entity extractor child from a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param cChildId The hierarchical entity extractor child ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteCompositeEntityChildResponse>
     */
    deleteCompositeEntityChild(appId: string, versionId: string, cEntityId: string, cChildId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteCompositeEntityChildResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param cChildId The hierarchical entity extractor child ID.
     * @param callback The callback
     */
    deleteCompositeEntityChild(appId: string, versionId: string, cEntityId: string, cChildId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param cChildId The hierarchical entity extractor child ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteCompositeEntityChild(appId: string, versionId: string, cEntityId: string, cChildId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Gets information about the regular expression entity models in a version of the
     * application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListRegexEntityInfosResponse>
     */
    listRegexEntityInfos(appId: string, versionId: string, options?: Models.ModelListRegexEntityInfosOptionalParams): Promise<Models.ModelListRegexEntityInfosResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listRegexEntityInfos(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.RegexEntityExtractor[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listRegexEntityInfos(appId: string, versionId: string, options: Models.ModelListRegexEntityInfosOptionalParams, callback: msRest.ServiceCallback<Models.RegexEntityExtractor[]>): void;
    /**
     * @summary Adds a regular expression entity model to a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for
     * the new regular expression entity extractor.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelCreateRegexEntityModelResponse>
     */
    createRegexEntityModel(appId: string, versionId: string, regexEntityExtractorCreateObj: Models.RegexModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateRegexEntityModelResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for
     * the new regular expression entity extractor.
     * @param callback The callback
     */
    createRegexEntityModel(appId: string, versionId: string, regexEntityExtractorCreateObj: Models.RegexModelCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for
     * the new regular expression entity extractor.
     * @param options The optional parameters
     * @param callback The callback
     */
    createRegexEntityModel(appId: string, versionId: string, regexEntityExtractorCreateObj: Models.RegexModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * @summary Get information about the Pattern.Any entity models in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListPatternAnyEntityInfosResponse>
     */
    listPatternAnyEntityInfos(appId: string, versionId: string, options?: Models.ModelListPatternAnyEntityInfosOptionalParams): Promise<Models.ModelListPatternAnyEntityInfosResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    listPatternAnyEntityInfos(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.PatternAnyEntityExtractor[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPatternAnyEntityInfos(appId: string, versionId: string, options: Models.ModelListPatternAnyEntityInfosOptionalParams, callback: msRest.ServiceCallback<Models.PatternAnyEntityExtractor[]>): void;
    /**
     * @summary Adds a pattern.any entity extractor to a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param extractorCreateObject A model object containing the name and explicit list for the new
     * Pattern.Any entity extractor.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelCreatePatternAnyEntityModelResponse>
     */
    createPatternAnyEntityModel(appId: string, versionId: string, extractorCreateObject: Models.PatternAnyModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreatePatternAnyEntityModelResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param extractorCreateObject A model object containing the name and explicit list for the new
     * Pattern.Any entity extractor.
     * @param callback The callback
     */
    createPatternAnyEntityModel(appId: string, versionId: string, extractorCreateObject: Models.PatternAnyModelCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param extractorCreateObject A model object containing the name and explicit list for the new
     * Pattern.Any entity extractor.
     * @param options The optional parameters
     * @param callback The callback
     */
    createPatternAnyEntityModel(appId: string, versionId: string, extractorCreateObject: Models.PatternAnyModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * @summary Get all roles for an entity in a version of the application
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListEntityRolesResponse>
     */
    listEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListEntityRolesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param callback The callback
     */
    listEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param options The optional parameters
     * @param callback The callback
     */
    listEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @summary Create an entity role in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelCreateEntityRoleResponse>
     */
    createEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param callback The callback
     */
    createEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param options The optional parameters
     * @param callback The callback
     */
    createEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * @summary Get a prebuilt entity's roles in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListPrebuiltEntityRolesResponse>
     */
    listPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListPrebuiltEntityRolesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param callback The callback
     */
    listPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param options The optional parameters
     * @param callback The callback
     */
    listPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @summary Create a role for a prebuilt entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelCreatePrebuiltEntityRoleResponse>
     */
    createPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreatePrebuiltEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param callback The callback
     */
    createPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param options The optional parameters
     * @param callback The callback
     */
    createPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * @summary Get all roles for a list entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListClosedListEntityRolesResponse>
     */
    listClosedListEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListClosedListEntityRolesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param callback The callback
     */
    listClosedListEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param options The optional parameters
     * @param callback The callback
     */
    listClosedListEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @summary Create a role for a list entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelCreateClosedListEntityRoleResponse>
     */
    createClosedListEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateClosedListEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param callback The callback
     */
    createClosedListEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param options The optional parameters
     * @param callback The callback
     */
    createClosedListEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * @summary Get all roles for a regular expression entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListRegexEntityRolesResponse>
     */
    listRegexEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListRegexEntityRolesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param callback The callback
     */
    listRegexEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param options The optional parameters
     * @param callback The callback
     */
    listRegexEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @summary Create a role for an regular expression entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelCreateRegexEntityRoleResponse>
     */
    createRegexEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateRegexEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param callback The callback
     */
    createRegexEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param options The optional parameters
     * @param callback The callback
     */
    createRegexEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * @summary Get all roles for a composite entity in a version of the application
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListCompositeEntityRolesResponse>
     */
    listCompositeEntityRoles(appId: string, versionId: string, cEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListCompositeEntityRolesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param callback The callback
     */
    listCompositeEntityRoles(appId: string, versionId: string, cEntityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listCompositeEntityRoles(appId: string, versionId: string, cEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @summary Create a role for a composite entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelCreateCompositeEntityRoleResponse>
     */
    createCompositeEntityRole(appId: string, versionId: string, cEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateCompositeEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param callback The callback
     */
    createCompositeEntityRole(appId: string, versionId: string, cEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param options The optional parameters
     * @param callback The callback
     */
    createCompositeEntityRole(appId: string, versionId: string, cEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * @summary Get all roles for a Pattern.any entity in a version of the application
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListPatternAnyEntityRolesResponse>
     */
    listPatternAnyEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListPatternAnyEntityRolesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param callback The callback
     */
    listPatternAnyEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param options The optional parameters
     * @param callback The callback
     */
    listPatternAnyEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @summary Create a role for an Pattern.any entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelCreatePatternAnyEntityRoleResponse>
     */
    createPatternAnyEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreatePatternAnyEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param callback The callback
     */
    createPatternAnyEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param options The optional parameters
     * @param callback The callback
     */
    createPatternAnyEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * @summary Get all roles for a hierarchical entity in a version of the application
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListHierarchicalEntityRolesResponse>
     */
    listHierarchicalEntityRoles(appId: string, versionId: string, hEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListHierarchicalEntityRolesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param callback The callback
     */
    listHierarchicalEntityRoles(appId: string, versionId: string, hEntityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHierarchicalEntityRoles(appId: string, versionId: string, hEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @summary Create a role for an hierarchical entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelCreateHierarchicalEntityRoleResponse>
     */
    createHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateHierarchicalEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param callback The callback
     */
    createHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param options The optional parameters
     * @param callback The callback
     */
    createHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * @summary Get all roles for a prebuilt entity in a version of the application
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelListCustomPrebuiltEntityRolesResponse>
     */
    listCustomPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListCustomPrebuiltEntityRolesResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param callback The callback
     */
    listCustomPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id
     * @param options The optional parameters
     * @param callback The callback
     */
    listCustomPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
    /**
     * @summary Create a role for a prebuilt entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelCreateCustomPrebuiltEntityRoleResponse>
     */
    createCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateCustomPrebuiltEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param callback The callback
     */
    createCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param entityRoleCreateObject An entity role object containing the name of role.
     * @param options The optional parameters
     * @param callback The callback
     */
    createCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * @summary Get the explicit (exception) list of the pattern.any entity in a version of the
     * application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity id.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetExplicitListResponse>
     */
    getExplicitList(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetExplicitListResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity id.
     * @param callback The callback
     */
    getExplicitList(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.ExplicitListItem[]>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getExplicitList(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExplicitListItem[]>): void;
    /**
     * @summary Add a new exception to the explicit list for the Pattern.Any entity in a version of the
     * application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param item The new explicit list item.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelAddExplicitListItemResponse>
     */
    addExplicitListItem(appId: string, versionId: string, entityId: string, item: Models.ExplicitListItemCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddExplicitListItemResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param item The new explicit list item.
     * @param callback The callback
     */
    addExplicitListItem(appId: string, versionId: string, entityId: string, item: Models.ExplicitListItemCreateObject, callback: msRest.ServiceCallback<number>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param item The new explicit list item.
     * @param options The optional parameters
     * @param callback The callback
     */
    addExplicitListItem(appId: string, versionId: string, entityId: string, item: Models.ExplicitListItemCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
    /**
     * @summary Gets information about a regular expression entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regular expression entity model ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetRegexEntityEntityInfoResponse>
     */
    getRegexEntityEntityInfo(appId: string, versionId: string, regexEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetRegexEntityEntityInfoResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regular expression entity model ID.
     * @param callback The callback
     */
    getRegexEntityEntityInfo(appId: string, versionId: string, regexEntityId: string, callback: msRest.ServiceCallback<Models.RegexEntityExtractor>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regular expression entity model ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getRegexEntityEntityInfo(appId: string, versionId: string, regexEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegexEntityExtractor>): void;
    /**
     * @summary Updates the regular expression entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regular expression entity extractor ID.
     * @param regexEntityUpdateObject An object containing the new entity name and regex pattern.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateRegexEntityModelResponse>
     */
    updateRegexEntityModel(appId: string, versionId: string, regexEntityId: string, regexEntityUpdateObject: Models.RegexModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateRegexEntityModelResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regular expression entity extractor ID.
     * @param regexEntityUpdateObject An object containing the new entity name and regex pattern.
     * @param callback The callback
     */
    updateRegexEntityModel(appId: string, versionId: string, regexEntityId: string, regexEntityUpdateObject: Models.RegexModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regular expression entity extractor ID.
     * @param regexEntityUpdateObject An object containing the new entity name and regex pattern.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateRegexEntityModel(appId: string, versionId: string, regexEntityId: string, regexEntityUpdateObject: Models.RegexModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Deletes a regular expression entity from a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regular expression entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteRegexEntityModelResponse>
     */
    deleteRegexEntityModel(appId: string, versionId: string, regexEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteRegexEntityModelResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regular expression entity extractor ID.
     * @param callback The callback
     */
    deleteRegexEntityModel(appId: string, versionId: string, regexEntityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regular expression entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteRegexEntityModel(appId: string, versionId: string, regexEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Gets information about the Pattern.Any model in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetPatternAnyEntityInfoResponse>
     */
    getPatternAnyEntityInfo(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetPatternAnyEntityInfoResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param callback The callback
     */
    getPatternAnyEntityInfo(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.PatternAnyEntityExtractor>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPatternAnyEntityInfo(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PatternAnyEntityExtractor>): void;
    /**
     * @summary Updates the name and explicit (exception) list of a Pattern.Any entity model in a
     * version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdatePatternAnyEntityModelResponse>
     */
    updatePatternAnyEntityModel(appId: string, versionId: string, entityId: string, patternAnyUpdateObject: Models.PatternAnyModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdatePatternAnyEntityModelResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity.
     * @param callback The callback
     */
    updatePatternAnyEntityModel(appId: string, versionId: string, entityId: string, patternAnyUpdateObject: Models.PatternAnyModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity.
     * @param options The optional parameters
     * @param callback The callback
     */
    updatePatternAnyEntityModel(appId: string, versionId: string, entityId: string, patternAnyUpdateObject: Models.PatternAnyModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Deletes a Pattern.Any entity extractor from a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeletePatternAnyEntityModelResponse>
     */
    deletePatternAnyEntityModel(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeletePatternAnyEntityModelResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param callback The callback
     */
    deletePatternAnyEntityModel(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deletePatternAnyEntityModel(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Get one role for a given entity in a version of the application
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetEntityRoleResponse>
     */
    getEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param callback The callback
     */
    getEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @summary Update a role for a given entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateEntityRoleResponse>
     */
    updateEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param callback The callback
     */
    updateEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Delete an entity role in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteEntityRoleResponse>
     */
    deleteEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param callback The callback
     */
    deleteEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Get one role for a given prebuilt entity in a version of the application
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetPrebuiltEntityRoleResponse>
     */
    getPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetPrebuiltEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param callback The callback
     */
    getPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @summary Update a role for a given prebuilt entity in a version of the application
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdatePrebuiltEntityRoleResponse>
     */
    updatePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdatePrebuiltEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param callback The callback
     */
    updatePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param options The optional parameters
     * @param callback The callback
     */
    updatePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Delete a role in a prebuilt entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeletePrebuiltEntityRoleResponse>
     */
    deletePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeletePrebuiltEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param callback The callback
     */
    deletePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deletePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Get one role for a given list entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetClosedListEntityRoleResponse>
     */
    getClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetClosedListEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param callback The callback
     */
    getClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @summary Update a role for a given list entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateClosedListEntityRoleResponse>
     */
    updateClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateClosedListEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param callback The callback
     */
    updateClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Delete a role for a given list entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteClosedListEntityRoleResponse>
     */
    deleteClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteClosedListEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param callback The callback
     */
    deleteClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Get one role for a given regular expression entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetRegexEntityRoleResponse>
     */
    getRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetRegexEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param callback The callback
     */
    getRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @summary Update a role for a given regular expression entity in a version of the application
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateRegexEntityRoleResponse>
     */
    updateRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateRegexEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param callback The callback
     */
    updateRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Delete a role for a given regular expression in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteRegexEntityRoleResponse>
     */
    deleteRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteRegexEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param callback The callback
     */
    deleteRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Get one role for a given composite entity in a version of the application
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId entity role ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetCompositeEntityRoleResponse>
     */
    getCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetCompositeEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId entity role ID.
     * @param callback The callback
     */
    getCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId entity role ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @summary Update a role for a given composite entity in a version of the application
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateCompositeEntityRoleResponse>
     */
    updateCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateCompositeEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param callback The callback
     */
    updateCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Delete a role for a given composite entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role Id.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteCompositeEntityRoleResponse>
     */
    deleteCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteCompositeEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role Id.
     * @param callback The callback
     */
    deleteCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role Id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Get one role for a given Pattern.any entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetPatternAnyEntityRoleResponse>
     */
    getPatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetPatternAnyEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param callback The callback
     */
    getPatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @summary Update a role for a given Pattern.any entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdatePatternAnyEntityRoleResponse>
     */
    updatePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdatePatternAnyEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param callback The callback
     */
    updatePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param options The optional parameters
     * @param callback The callback
     */
    updatePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Delete a role for a given Pattern.any entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeletePatternAnyEntityRoleResponse>
     */
    deletePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeletePatternAnyEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param callback The callback
     */
    deletePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deletePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Get one role for a given hierarchical entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId entity role ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetHierarchicalEntityRoleResponse>
     */
    getHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetHierarchicalEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId entity role ID.
     * @param callback The callback
     */
    getHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId entity role ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @summary Update a role for a given hierarchical entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateHierarchicalEntityRoleResponse>
     */
    updateHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateHierarchicalEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param callback The callback
     */
    updateHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Delete a role for a given hierarchical role in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role Id.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteHierarchicalEntityRoleResponse>
     */
    deleteHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteHierarchicalEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role Id.
     * @param callback The callback
     */
    deleteHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role Id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Get one role for a given prebuilt entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetCustomEntityRoleResponse>
     */
    getCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetCustomEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param callback The callback
     */
    getCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
    /**
     * @summary Update a role for a given prebuilt entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateCustomPrebuiltEntityRoleResponse>
     */
    updateCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateCustomPrebuiltEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param callback The callback
     */
    updateCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param entityRoleUpdateObject The new entity role.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Delete a role for a given prebuilt entity in a version of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteCustomEntityRoleResponse>
     */
    deleteCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteCustomEntityRoleResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param callback The callback
     */
    deleteCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Get the explicit (exception) list of the pattern.any entity in a version of the
     * application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity Id.
     * @param itemId The explicit list item Id.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelGetExplicitListItemResponse>
     */
    getExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetExplicitListItemResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity Id.
     * @param itemId The explicit list item Id.
     * @param callback The callback
     */
    getExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, callback: msRest.ServiceCallback<Models.ExplicitListItem>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity Id.
     * @param itemId The explicit list item Id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExplicitListItem>): void;
    /**
     * @summary Updates an explicit (exception) list item for a Pattern.Any entity in a version of the
     * application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param itemId The explicit list item ID.
     * @param item The new explicit list item.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelUpdateExplicitListItemResponse>
     */
    updateExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, item: Models.ExplicitListItemUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateExplicitListItemResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param itemId The explicit list item ID.
     * @param item The new explicit list item.
     * @param callback The callback
     */
    updateExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, item: Models.ExplicitListItemUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param itemId The explicit list item ID.
     * @param item The new explicit list item.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, item: Models.ExplicitListItemUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @summary Delete an item from the explicit (exception) list for a Pattern.any entity in a version
     * of the application.
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The pattern.any entity id.
     * @param itemId The explicit list item which will be deleted.
     * @param [options] The optional parameters
     * @returns Promise<Models.ModelDeleteExplicitListItemResponse>
     */
    deleteExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteExplicitListItemResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The pattern.any entity id.
     * @param itemId The explicit list item which will be deleted.
     * @param callback The callback
     */
    deleteExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The pattern.any entity id.
     * @param itemId The explicit list item which will be deleted.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
}
