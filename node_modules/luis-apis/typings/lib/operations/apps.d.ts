import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { LuisAuthoringContext } from "../luisAuthoringContext";
/** Class representing a Apps. */
export declare class Apps {
    private readonly client;
    /**
     * Create a Apps.
     * @param {LuisAuthoringContext} client Reference to the service client.
     */
    constructor(client: LuisAuthoringContext);
    /**
     * Creates a new LUIS app.
     * @param applicationCreateObject An application containing Name, Description (optional), Culture,
     * Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the
     * application. Default value for the version ID is "0.1". Note: the culture cannot be changed
     * after the app is created.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsAddResponse>
     */
    add(applicationCreateObject: Models.ApplicationCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.AppsAddResponse>;
    /**
     * @param applicationCreateObject An application containing Name, Description (optional), Culture,
     * Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the
     * application. Default value for the version ID is "0.1". Note: the culture cannot be changed
     * after the app is created.
     * @param callback The callback
     */
    add(applicationCreateObject: Models.ApplicationCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param applicationCreateObject An application containing Name, Description (optional), Culture,
     * Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the
     * application. Default value for the version ID is "0.1". Note: the culture cannot be changed
     * after the app is created.
     * @param options The optional parameters
     * @param callback The callback
     */
    add(applicationCreateObject: Models.ApplicationCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Lists all of the user's applications.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsListResponse>
     */
    list(options?: Models.AppsListOptionalParams): Promise<Models.AppsListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.ApplicationInfoResponse[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: Models.AppsListOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationInfoResponse[]>): void;
    /**
     * Imports an application to LUIS, the application's structure is included in the request body.
     * @param luisApp A LUIS application structure.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsImportMethodResponse>
     */
    importMethod(luisApp: Models.LuisApp, options?: Models.AppsImportMethodOptionalParams): Promise<Models.AppsImportMethodResponse>;
    /**
     * @param luisApp A LUIS application structure.
     * @param callback The callback
     */
    importMethod(luisApp: Models.LuisApp, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param luisApp A LUIS application structure.
     * @param options The optional parameters
     * @param callback The callback
     */
    importMethod(luisApp: Models.LuisApp, options: Models.AppsImportMethodOptionalParams, callback: msRest.ServiceCallback<string>): void;
    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsListCortanaEndpointsResponse>
     */
    listCortanaEndpoints(options?: msRest.RequestOptionsBase): Promise<Models.AppsListCortanaEndpointsResponse>;
    /**
     * @param callback The callback
     */
    listCortanaEndpoints(callback: msRest.ServiceCallback<Models.PersonalAssistantsResponse>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listCortanaEndpoints(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PersonalAssistantsResponse>): void;
    /**
     * Gets the available application domains.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsListDomainsResponse>
     */
    listDomains(options?: msRest.RequestOptionsBase): Promise<Models.AppsListDomainsResponse>;
    /**
     * @param callback The callback
     */
    listDomains(callback: msRest.ServiceCallback<string[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listDomains(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
    /**
     * Gets the application available usage scenarios.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsListUsageScenariosResponse>
     */
    listUsageScenarios(options?: msRest.RequestOptionsBase): Promise<Models.AppsListUsageScenariosResponse>;
    /**
     * @param callback The callback
     */
    listUsageScenarios(callback: msRest.ServiceCallback<string[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listUsageScenarios(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
    /**
     * Gets a list of supported cultures. Cultures are equivalent to the written language and locale.
     * For example,"en-us" represents the U.S. variation of English.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsListSupportedCulturesResponse>
     */
    listSupportedCultures(options?: msRest.RequestOptionsBase): Promise<Models.AppsListSupportedCulturesResponse>;
    /**
     * @param callback The callback
     */
    listSupportedCultures(callback: msRest.ServiceCallback<Models.AvailableCulture[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listSupportedCultures(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AvailableCulture[]>): void;
    /**
     * Gets the logs of the past month's endpoint queries for the application.
     * @param appId The application ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsDownloadQueryLogsResponse>
     */
    downloadQueryLogs(appId: string, options?: msRest.RequestOptionsBase): Promise<Models.AppsDownloadQueryLogsResponse>;
    /**
     * @param appId The application ID.
     * @param callback The callback
     */
    downloadQueryLogs(appId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param appId The application ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    downloadQueryLogs(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the application info.
     * @param appId The application ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsGetResponse>
     */
    get(appId: string, options?: msRest.RequestOptionsBase): Promise<Models.AppsGetResponse>;
    /**
     * @param appId The application ID.
     * @param callback The callback
     */
    get(appId: string, callback: msRest.ServiceCallback<Models.ApplicationInfoResponse>): void;
    /**
     * @param appId The application ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationInfoResponse>): void;
    /**
     * Updates the name or description of the application.
     * @param appId The application ID.
     * @param applicationUpdateObject A model containing Name and Description of the application.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsUpdateResponse>
     */
    update(appId: string, applicationUpdateObject: Models.ApplicationUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.AppsUpdateResponse>;
    /**
     * @param appId The application ID.
     * @param applicationUpdateObject A model containing Name and Description of the application.
     * @param callback The callback
     */
    update(appId: string, applicationUpdateObject: Models.ApplicationUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param applicationUpdateObject A model containing Name and Description of the application.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(appId: string, applicationUpdateObject: Models.ApplicationUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Deletes an application.
     * @param appId The application ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsDeleteMethodResponse>
     */
    deleteMethod(appId: string, options?: Models.AppsDeleteMethodOptionalParams): Promise<Models.AppsDeleteMethodResponse>;
    /**
     * @param appId The application ID.
     * @param callback The callback
     */
    deleteMethod(appId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(appId: string, options: Models.AppsDeleteMethodOptionalParams, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Publishes a specific version of the application.
     * @param appId The application ID.
     * @param applicationPublishObject The application publish object. The region is the target region
     * that the application is published to.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsPublishResponse>
     */
    publish(appId: string, applicationPublishObject: Models.ApplicationPublishObject, options?: msRest.RequestOptionsBase): Promise<Models.AppsPublishResponse>;
    /**
     * @param appId The application ID.
     * @param applicationPublishObject The application publish object. The region is the target region
     * that the application is published to.
     * @param callback The callback
     */
    publish(appId: string, applicationPublishObject: Models.ApplicationPublishObject, callback: msRest.ServiceCallback<Models.ProductionOrStagingEndpointInfo>): void;
    /**
     * @param appId The application ID.
     * @param applicationPublishObject The application publish object. The region is the target region
     * that the application is published to.
     * @param options The optional parameters
     * @param callback The callback
     */
    publish(appId: string, applicationPublishObject: Models.ApplicationPublishObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductionOrStagingEndpointInfo>): void;
    /**
     * Get the application settings including 'UseAllTrainingData'.
     * @param appId The application ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsGetSettingsResponse>
     */
    getSettings(appId: string, options?: msRest.RequestOptionsBase): Promise<Models.AppsGetSettingsResponse>;
    /**
     * @param appId The application ID.
     * @param callback The callback
     */
    getSettings(appId: string, callback: msRest.ServiceCallback<Models.ApplicationSettings>): void;
    /**
     * @param appId The application ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getSettings(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationSettings>): void;
    /**
     * Updates the application settings including 'UseAllTrainingData'.
     * @param appId The application ID.
     * @param applicationSettingUpdateObject An object containing the new application settings.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsUpdateSettingsResponse>
     */
    updateSettings(appId: string, applicationSettingUpdateObject: Models.ApplicationSettingUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.AppsUpdateSettingsResponse>;
    /**
     * @param appId The application ID.
     * @param applicationSettingUpdateObject An object containing the new application settings.
     * @param callback The callback
     */
    updateSettings(appId: string, applicationSettingUpdateObject: Models.ApplicationSettingUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param applicationSettingUpdateObject An object containing the new application settings.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateSettings(appId: string, applicationSettingUpdateObject: Models.ApplicationSettingUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Get the application publish settings including 'UseAllTrainingData'.
     * @param appId The application ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsGetPublishSettingsResponse>
     */
    getPublishSettings(appId: string, options?: msRest.RequestOptionsBase): Promise<Models.AppsGetPublishSettingsResponse>;
    /**
     * @param appId The application ID.
     * @param callback The callback
     */
    getPublishSettings(appId: string, callback: msRest.ServiceCallback<Models.PublishSettings>): void;
    /**
     * @param appId The application ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPublishSettings(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublishSettings>): void;
    /**
     * Updates the application publish settings including 'UseAllTrainingData'.
     * @param appId The application ID.
     * @param publishSettingUpdateObject An object containing the new publish application settings.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsUpdatePublishSettingsResponse>
     */
    updatePublishSettings(appId: string, publishSettingUpdateObject: Models.PublishSettingUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.AppsUpdatePublishSettingsResponse>;
    /**
     * @param appId The application ID.
     * @param publishSettingUpdateObject An object containing the new publish application settings.
     * @param callback The callback
     */
    updatePublishSettings(appId: string, publishSettingUpdateObject: Models.PublishSettingUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * @param appId The application ID.
     * @param publishSettingUpdateObject An object containing the new publish application settings.
     * @param options The optional parameters
     * @param callback The callback
     */
    updatePublishSettings(appId: string, publishSettingUpdateObject: Models.PublishSettingUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
    /**
     * Returns the available endpoint deployment regions and URLs.
     * @param appId The application ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsListEndpointsResponse>
     */
    listEndpoints(appId: string, options?: msRest.RequestOptionsBase): Promise<Models.AppsListEndpointsResponse>;
    /**
     * @param appId The application ID.
     * @param callback The callback
     */
    listEndpoints(appId: string, callback: msRest.ServiceCallback<{
        [propertyName: string]: string;
    }>): void;
    /**
     * @param appId The application ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listEndpoints(appId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{
        [propertyName: string]: string;
    }>): void;
    /**
     * Gets all the available custom prebuilt domains for all cultures.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsListAvailableCustomPrebuiltDomainsResponse>
     */
    listAvailableCustomPrebuiltDomains(options?: msRest.RequestOptionsBase): Promise<Models.AppsListAvailableCustomPrebuiltDomainsResponse>;
    /**
     * @param callback The callback
     */
    listAvailableCustomPrebuiltDomains(callback: msRest.ServiceCallback<Models.PrebuiltDomain[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listAvailableCustomPrebuiltDomains(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrebuiltDomain[]>): void;
    /**
     * Adds a prebuilt domain along with its intent and entity models as a new application.
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and
     * culture of the domain.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsAddCustomPrebuiltDomainResponse>
     */
    addCustomPrebuiltDomain(prebuiltDomainCreateObject: Models.PrebuiltDomainCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.AppsAddCustomPrebuiltDomainResponse>;
    /**
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and
     * culture of the domain.
     * @param callback The callback
     */
    addCustomPrebuiltDomain(prebuiltDomainCreateObject: Models.PrebuiltDomainCreateObject, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and
     * culture of the domain.
     * @param options The optional parameters
     * @param callback The callback
     */
    addCustomPrebuiltDomain(prebuiltDomainCreateObject: Models.PrebuiltDomainCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Gets all the available prebuilt domains for a specific culture.
     * @param culture Culture.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsListAvailableCustomPrebuiltDomainsForCultureResponse>
     */
    listAvailableCustomPrebuiltDomainsForCulture(culture: string, options?: msRest.RequestOptionsBase): Promise<Models.AppsListAvailableCustomPrebuiltDomainsForCultureResponse>;
    /**
     * @param culture Culture.
     * @param callback The callback
     */
    listAvailableCustomPrebuiltDomainsForCulture(culture: string, callback: msRest.ServiceCallback<Models.PrebuiltDomain[]>): void;
    /**
     * @param culture Culture.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAvailableCustomPrebuiltDomainsForCulture(culture: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrebuiltDomain[]>): void;
    /**
     * Packages a published LUIS application as a GZip file to be used in the LUIS container.
     * @summary package - Gets published LUIS application package in binary stream GZip format
     * @param appId The application ID.
     * @param slotName The publishing slot name.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsPackagePublishedApplicationAsGzipResponse>
     */
    packagePublishedApplicationAsGzip(appId: string, slotName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppsPackagePublishedApplicationAsGzipResponse>;
    /**
     * @param appId The application ID.
     * @param slotName The publishing slot name.
     * @param callback The callback
     */
    packagePublishedApplicationAsGzip(appId: string, slotName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param appId The application ID.
     * @param slotName The publishing slot name.
     * @param options The optional parameters
     * @param callback The callback
     */
    packagePublishedApplicationAsGzip(appId: string, slotName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Packages trained LUIS application as GZip file to be used in the LUIS container.
     * @summary package - Gets trained LUIS application package in binary stream GZip format
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsPackageTrainedApplicationAsGzipResponse>
     */
    packageTrainedApplicationAsGzip(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.AppsPackageTrainedApplicationAsGzipResponse>;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param callback The callback
     */
    packageTrainedApplicationAsGzip(appId: string, versionId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    packageTrainedApplicationAsGzip(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
