"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("@azure/ms-rest-js");
const Mappers = require("../models/modelMappers");
const Parameters = require("../models/parameters");
/** Class representing a Model. */
class Model {
    /**
     * Create a Model.
     * @param {LuisAuthoringContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    addIntent(appId, versionId, intentCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            intentCreateObject,
            options
        }, addIntentOperationSpec, callback);
    }
    listIntents(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listIntentsOperationSpec, callback);
    }
    addEntity(appId, versionId, modelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            modelCreateObject,
            options
        }, addEntityOperationSpec, callback);
    }
    listEntities(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listEntitiesOperationSpec, callback);
    }
    addHierarchicalEntity(appId, versionId, hierarchicalModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hierarchicalModelCreateObject,
            options
        }, addHierarchicalEntityOperationSpec, callback);
    }
    listHierarchicalEntities(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listHierarchicalEntitiesOperationSpec, callback);
    }
    addCompositeEntity(appId, versionId, compositeModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            compositeModelCreateObject,
            options
        }, addCompositeEntityOperationSpec, callback);
    }
    listCompositeEntities(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listCompositeEntitiesOperationSpec, callback);
    }
    listClosedLists(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listClosedListsOperationSpec, callback);
    }
    addClosedList(appId, versionId, closedListModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            closedListModelCreateObject,
            options
        }, addClosedListOperationSpec, callback);
    }
    addPrebuilt(appId, versionId, prebuiltExtractorNames, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            prebuiltExtractorNames,
            options
        }, addPrebuiltOperationSpec, callback);
    }
    listPrebuilts(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listPrebuiltsOperationSpec, callback);
    }
    listPrebuiltEntities(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listPrebuiltEntitiesOperationSpec, callback);
    }
    listModels(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listModelsOperationSpec, callback);
    }
    examplesMethod(appId, versionId, modelId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            modelId,
            options
        }, examplesMethodOperationSpec, callback);
    }
    getIntent(appId, versionId, intentId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            intentId,
            options
        }, getIntentOperationSpec, callback);
    }
    updateIntent(appId, versionId, intentId, modelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            intentId,
            modelUpdateObject,
            options
        }, updateIntentOperationSpec, callback);
    }
    deleteIntent(appId, versionId, intentId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            intentId,
            options
        }, deleteIntentOperationSpec, callback);
    }
    getEntity(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, getEntityOperationSpec, callback);
    }
    updateEntity(appId, versionId, entityId, modelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            modelUpdateObject,
            options
        }, updateEntityOperationSpec, callback);
    }
    deleteEntity(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, deleteEntityOperationSpec, callback);
    }
    getHierarchicalEntity(appId, versionId, hEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            options
        }, getHierarchicalEntityOperationSpec, callback);
    }
    updateHierarchicalEntity(appId, versionId, hEntityId, hierarchicalModelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            hierarchicalModelUpdateObject,
            options
        }, updateHierarchicalEntityOperationSpec, callback);
    }
    deleteHierarchicalEntity(appId, versionId, hEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            options
        }, deleteHierarchicalEntityOperationSpec, callback);
    }
    getCompositeEntity(appId, versionId, cEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            cEntityId,
            options
        }, getCompositeEntityOperationSpec, callback);
    }
    updateCompositeEntity(appId, versionId, cEntityId, compositeModelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            cEntityId,
            compositeModelUpdateObject,
            options
        }, updateCompositeEntityOperationSpec, callback);
    }
    deleteCompositeEntity(appId, versionId, cEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            cEntityId,
            options
        }, deleteCompositeEntityOperationSpec, callback);
    }
    getClosedList(appId, versionId, clEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            clEntityId,
            options
        }, getClosedListOperationSpec, callback);
    }
    updateClosedList(appId, versionId, clEntityId, closedListModelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            clEntityId,
            closedListModelUpdateObject,
            options
        }, updateClosedListOperationSpec, callback);
    }
    patchClosedList(appId, versionId, clEntityId, closedListModelPatchObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            clEntityId,
            closedListModelPatchObject,
            options
        }, patchClosedListOperationSpec, callback);
    }
    deleteClosedList(appId, versionId, clEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            clEntityId,
            options
        }, deleteClosedListOperationSpec, callback);
    }
    getPrebuilt(appId, versionId, prebuiltId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            prebuiltId,
            options
        }, getPrebuiltOperationSpec, callback);
    }
    deletePrebuilt(appId, versionId, prebuiltId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            prebuiltId,
            options
        }, deletePrebuiltOperationSpec, callback);
    }
    deleteSubList(appId, versionId, clEntityId, subListId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            clEntityId,
            subListId,
            options
        }, deleteSubListOperationSpec, callback);
    }
    updateSubList(appId, versionId, clEntityId, subListId, wordListBaseUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            clEntityId,
            subListId,
            wordListBaseUpdateObject,
            options
        }, updateSubListOperationSpec, callback);
    }
    listIntentSuggestions(appId, versionId, intentId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            intentId,
            options
        }, listIntentSuggestionsOperationSpec, callback);
    }
    listEntitySuggestions(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, listEntitySuggestionsOperationSpec, callback);
    }
    addSubList(appId, versionId, clEntityId, wordListCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            clEntityId,
            wordListCreateObject,
            options
        }, addSubListOperationSpec, callback);
    }
    addCustomPrebuiltDomain(appId, versionId, prebuiltDomainObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            prebuiltDomainObject,
            options
        }, addCustomPrebuiltDomainOperationSpec, callback);
    }
    addCustomPrebuiltIntent(appId, versionId, prebuiltDomainModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            prebuiltDomainModelCreateObject,
            options
        }, addCustomPrebuiltIntentOperationSpec, callback);
    }
    listCustomPrebuiltIntents(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listCustomPrebuiltIntentsOperationSpec, callback);
    }
    addCustomPrebuiltEntity(appId, versionId, prebuiltDomainModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            prebuiltDomainModelCreateObject,
            options
        }, addCustomPrebuiltEntityOperationSpec, callback);
    }
    listCustomPrebuiltEntities(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listCustomPrebuiltEntitiesOperationSpec, callback);
    }
    listCustomPrebuiltModels(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listCustomPrebuiltModelsOperationSpec, callback);
    }
    deleteCustomPrebuiltDomain(appId, versionId, domainName, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            domainName,
            options
        }, deleteCustomPrebuiltDomainOperationSpec, callback);
    }
    getHierarchicalEntityChild(appId, versionId, hEntityId, hChildId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            hChildId,
            options
        }, getHierarchicalEntityChildOperationSpec, callback);
    }
    updateHierarchicalEntityChild(appId, versionId, hEntityId, hChildId, hierarchicalChildModelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            hChildId,
            hierarchicalChildModelUpdateObject,
            options
        }, updateHierarchicalEntityChildOperationSpec, callback);
    }
    deleteHierarchicalEntityChild(appId, versionId, hEntityId, hChildId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            hChildId,
            options
        }, deleteHierarchicalEntityChildOperationSpec, callback);
    }
    addHierarchicalEntityChild(appId, versionId, hEntityId, hierarchicalChildModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            hierarchicalChildModelCreateObject,
            options
        }, addHierarchicalEntityChildOperationSpec, callback);
    }
    addCompositeEntityChild(appId, versionId, cEntityId, compositeChildModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            cEntityId,
            compositeChildModelCreateObject,
            options
        }, addCompositeEntityChildOperationSpec, callback);
    }
    deleteCompositeEntityChild(appId, versionId, cEntityId, cChildId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            cEntityId,
            cChildId,
            options
        }, deleteCompositeEntityChildOperationSpec, callback);
    }
    listRegexEntityInfos(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listRegexEntityInfosOperationSpec, callback);
    }
    createRegexEntityModel(appId, versionId, regexEntityExtractorCreateObj, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            regexEntityExtractorCreateObj,
            options
        }, createRegexEntityModelOperationSpec, callback);
    }
    listPatternAnyEntityInfos(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listPatternAnyEntityInfosOperationSpec, callback);
    }
    createPatternAnyEntityModel(appId, versionId, extractorCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            extractorCreateObject,
            options
        }, createPatternAnyEntityModelOperationSpec, callback);
    }
    listEntityRoles(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, listEntityRolesOperationSpec, callback);
    }
    createEntityRole(appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            entityRoleCreateObject,
            options
        }, createEntityRoleOperationSpec, callback);
    }
    listPrebuiltEntityRoles(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, listPrebuiltEntityRolesOperationSpec, callback);
    }
    createPrebuiltEntityRole(appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            entityRoleCreateObject,
            options
        }, createPrebuiltEntityRoleOperationSpec, callback);
    }
    listClosedListEntityRoles(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, listClosedListEntityRolesOperationSpec, callback);
    }
    createClosedListEntityRole(appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            entityRoleCreateObject,
            options
        }, createClosedListEntityRoleOperationSpec, callback);
    }
    listRegexEntityRoles(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, listRegexEntityRolesOperationSpec, callback);
    }
    createRegexEntityRole(appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            entityRoleCreateObject,
            options
        }, createRegexEntityRoleOperationSpec, callback);
    }
    listCompositeEntityRoles(appId, versionId, cEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            cEntityId,
            options
        }, listCompositeEntityRolesOperationSpec, callback);
    }
    createCompositeEntityRole(appId, versionId, cEntityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            cEntityId,
            entityRoleCreateObject,
            options
        }, createCompositeEntityRoleOperationSpec, callback);
    }
    listPatternAnyEntityRoles(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, listPatternAnyEntityRolesOperationSpec, callback);
    }
    createPatternAnyEntityRole(appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            entityRoleCreateObject,
            options
        }, createPatternAnyEntityRoleOperationSpec, callback);
    }
    listHierarchicalEntityRoles(appId, versionId, hEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            options
        }, listHierarchicalEntityRolesOperationSpec, callback);
    }
    createHierarchicalEntityRole(appId, versionId, hEntityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            entityRoleCreateObject,
            options
        }, createHierarchicalEntityRoleOperationSpec, callback);
    }
    listCustomPrebuiltEntityRoles(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, listCustomPrebuiltEntityRolesOperationSpec, callback);
    }
    createCustomPrebuiltEntityRole(appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            entityRoleCreateObject,
            options
        }, createCustomPrebuiltEntityRoleOperationSpec, callback);
    }
    getExplicitList(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, getExplicitListOperationSpec, callback);
    }
    addExplicitListItem(appId, versionId, entityId, item, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            item,
            options
        }, addExplicitListItemOperationSpec, callback);
    }
    getRegexEntityEntityInfo(appId, versionId, regexEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            regexEntityId,
            options
        }, getRegexEntityEntityInfoOperationSpec, callback);
    }
    updateRegexEntityModel(appId, versionId, regexEntityId, regexEntityUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            regexEntityId,
            regexEntityUpdateObject,
            options
        }, updateRegexEntityModelOperationSpec, callback);
    }
    deleteRegexEntityModel(appId, versionId, regexEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            regexEntityId,
            options
        }, deleteRegexEntityModelOperationSpec, callback);
    }
    getPatternAnyEntityInfo(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, getPatternAnyEntityInfoOperationSpec, callback);
    }
    updatePatternAnyEntityModel(appId, versionId, entityId, patternAnyUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            patternAnyUpdateObject,
            options
        }, updatePatternAnyEntityModelOperationSpec, callback);
    }
    deletePatternAnyEntityModel(appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            options
        }, deletePatternAnyEntityModelOperationSpec, callback);
    }
    getEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, getEntityRoleOperationSpec, callback);
    }
    updateEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            entityRoleUpdateObject,
            options
        }, updateEntityRoleOperationSpec, callback);
    }
    deleteEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, deleteEntityRoleOperationSpec, callback);
    }
    getPrebuiltEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, getPrebuiltEntityRoleOperationSpec, callback);
    }
    updatePrebuiltEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            entityRoleUpdateObject,
            options
        }, updatePrebuiltEntityRoleOperationSpec, callback);
    }
    deletePrebuiltEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, deletePrebuiltEntityRoleOperationSpec, callback);
    }
    getClosedListEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, getClosedListEntityRoleOperationSpec, callback);
    }
    updateClosedListEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            entityRoleUpdateObject,
            options
        }, updateClosedListEntityRoleOperationSpec, callback);
    }
    deleteClosedListEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, deleteClosedListEntityRoleOperationSpec, callback);
    }
    getRegexEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, getRegexEntityRoleOperationSpec, callback);
    }
    updateRegexEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            entityRoleUpdateObject,
            options
        }, updateRegexEntityRoleOperationSpec, callback);
    }
    deleteRegexEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, deleteRegexEntityRoleOperationSpec, callback);
    }
    getCompositeEntityRole(appId, versionId, cEntityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            cEntityId,
            roleId,
            options
        }, getCompositeEntityRoleOperationSpec, callback);
    }
    updateCompositeEntityRole(appId, versionId, cEntityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            cEntityId,
            roleId,
            entityRoleUpdateObject,
            options
        }, updateCompositeEntityRoleOperationSpec, callback);
    }
    deleteCompositeEntityRole(appId, versionId, cEntityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            cEntityId,
            roleId,
            options
        }, deleteCompositeEntityRoleOperationSpec, callback);
    }
    getPatternAnyEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, getPatternAnyEntityRoleOperationSpec, callback);
    }
    updatePatternAnyEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            entityRoleUpdateObject,
            options
        }, updatePatternAnyEntityRoleOperationSpec, callback);
    }
    deletePatternAnyEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, deletePatternAnyEntityRoleOperationSpec, callback);
    }
    getHierarchicalEntityRole(appId, versionId, hEntityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            roleId,
            options
        }, getHierarchicalEntityRoleOperationSpec, callback);
    }
    updateHierarchicalEntityRole(appId, versionId, hEntityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            roleId,
            entityRoleUpdateObject,
            options
        }, updateHierarchicalEntityRoleOperationSpec, callback);
    }
    deleteHierarchicalEntityRole(appId, versionId, hEntityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            hEntityId,
            roleId,
            options
        }, deleteHierarchicalEntityRoleOperationSpec, callback);
    }
    getCustomEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, getCustomEntityRoleOperationSpec, callback);
    }
    updateCustomPrebuiltEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            entityRoleUpdateObject,
            options
        }, updateCustomPrebuiltEntityRoleOperationSpec, callback);
    }
    deleteCustomEntityRole(appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            roleId,
            options
        }, deleteCustomEntityRoleOperationSpec, callback);
    }
    getExplicitListItem(appId, versionId, entityId, itemId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            itemId,
            options
        }, getExplicitListItemOperationSpec, callback);
    }
    updateExplicitListItem(appId, versionId, entityId, itemId, item, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            itemId,
            item,
            options
        }, updateExplicitListItemOperationSpec, callback);
    }
    deleteExplicitListItem(appId, versionId, entityId, itemId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            entityId,
            itemId,
            options
        }, deleteExplicitListItemOperationSpec, callback);
    }
}
exports.Model = Model;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const addIntentOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/intents",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "intentCreateObject",
        mapper: Object.assign({}, Mappers.ModelCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listIntentsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/intents",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntentClassifier"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addEntityOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/entities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "modelCreateObject",
        mapper: Object.assign({}, Mappers.ModelCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listEntitiesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/entities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityExtractor"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addHierarchicalEntityOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "hierarchicalModelCreateObject",
        mapper: Object.assign({}, Mappers.HierarchicalEntityModel, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listHierarchicalEntitiesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HierarchicalEntityExtractor"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addCompositeEntityOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/compositeentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "compositeModelCreateObject",
        mapper: Object.assign({}, Mappers.CompositeEntityModel, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listCompositeEntitiesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/compositeentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CompositeEntityExtractor"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listClosedListsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/closedlists",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClosedListEntityExtractor"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addClosedListOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/closedlists",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "closedListModelCreateObject",
        mapper: Object.assign({}, Mappers.ClosedListModelCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addPrebuiltOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/prebuilts",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "prebuiltExtractorNames",
        mapper: {
            required: true,
            serializedName: "prebuiltExtractorNames",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        }
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrebuiltEntityExtractor"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listPrebuiltsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/prebuilts",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrebuiltEntityExtractor"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listPrebuiltEntitiesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/listprebuilts",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AvailablePrebuiltEntityModel"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listModelsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/models",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ModelInfoResponse"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const examplesMethodOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/models/{modelId}/examples",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.modelId
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LabelTextObject"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getIntentOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IntentClassifier
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateIntentOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    requestBody: {
        parameterPath: "modelUpdateObject",
        mapper: Object.assign({}, Mappers.ModelUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteIntentOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    queryParameters: [
        Parameters.deleteUtterances
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getEntityOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityExtractor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateEntityOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "modelUpdateObject",
        mapper: Object.assign({}, Mappers.ModelUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteEntityOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getHierarchicalEntityOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HierarchicalEntityExtractor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateHierarchicalEntityOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId
    ],
    requestBody: {
        parameterPath: "hierarchicalModelUpdateObject",
        mapper: Object.assign({}, Mappers.HierarchicalEntityModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteHierarchicalEntityOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getCompositeEntityOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CompositeEntityExtractor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateCompositeEntityOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    requestBody: {
        parameterPath: "compositeModelUpdateObject",
        mapper: Object.assign({}, Mappers.CompositeEntityModel, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteCompositeEntityOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getClosedListOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ClosedListEntityExtractor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateClosedListOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId
    ],
    requestBody: {
        parameterPath: "closedListModelUpdateObject",
        mapper: Object.assign({}, Mappers.ClosedListModelUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const patchClosedListOperationSpec = {
    httpMethod: "PATCH",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId
    ],
    requestBody: {
        parameterPath: "closedListModelPatchObject",
        mapper: Object.assign({}, Mappers.ClosedListModelPatchObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteClosedListOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getPrebuiltOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.prebuiltId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PrebuiltEntityExtractor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deletePrebuiltOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.prebuiltId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteSubListOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId,
        Parameters.subListId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateSubListOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId,
        Parameters.subListId
    ],
    requestBody: {
        parameterPath: "wordListBaseUpdateObject",
        mapper: Object.assign({}, Mappers.WordListBaseUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listIntentSuggestionsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}/suggest",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    queryParameters: [
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntentsSuggestionExample"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listEntitySuggestionsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/suggest",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    queryParameters: [
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntitiesSuggestionExample"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addSubListOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId
    ],
    requestBody: {
        parameterPath: "wordListCreateObject",
        mapper: Object.assign({}, Mappers.WordListObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addCustomPrebuiltDomainOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/customprebuiltdomains",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "prebuiltDomainObject",
        mapper: Object.assign({}, Mappers.PrebuiltDomainCreateBaseObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Uuid"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addCustomPrebuiltIntentOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/customprebuiltintents",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "prebuiltDomainModelCreateObject",
        mapper: Object.assign({}, Mappers.PrebuiltDomainModelCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listCustomPrebuiltIntentsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/customprebuiltintents",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntentClassifier"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addCustomPrebuiltEntityOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "prebuiltDomainModelCreateObject",
        mapper: Object.assign({}, Mappers.PrebuiltDomainModelCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listCustomPrebuiltEntitiesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityExtractor"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listCustomPrebuiltModelsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/customprebuiltmodels",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomPrebuiltModel"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteCustomPrebuiltDomainOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/customprebuiltdomains/{domainName}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.domainName
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getHierarchicalEntityChildOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.hChildId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HierarchicalChildEntity
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateHierarchicalEntityChildOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.hChildId
    ],
    requestBody: {
        parameterPath: "hierarchicalChildModelUpdateObject",
        mapper: Object.assign({}, Mappers.HierarchicalChildModelUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteHierarchicalEntityChildOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.hChildId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addHierarchicalEntityChildOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId
    ],
    requestBody: {
        parameterPath: "hierarchicalChildModelCreateObject",
        mapper: Object.assign({}, Mappers.HierarchicalChildModelCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addCompositeEntityChildOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    requestBody: {
        parameterPath: "compositeChildModelCreateObject",
        mapper: Object.assign({}, Mappers.CompositeChildModelCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteCompositeEntityChildOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children/{cChildId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId,
        Parameters.cChildId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listRegexEntityInfosOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/regexentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RegexEntityExtractor"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const createRegexEntityModelOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/regexentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "regexEntityExtractorCreateObj",
        mapper: Object.assign({}, Mappers.RegexModelCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listPatternAnyEntityInfosOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PatternAnyEntityExtractor"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const createPatternAnyEntityModelOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/patternanyentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "extractorCreateObject",
        mapper: Object.assign({}, Mappers.PatternAnyModelCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const createEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: Object.assign({}, Mappers.EntityRoleCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listPrebuiltEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const createPrebuiltEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: Object.assign({}, Mappers.EntityRoleCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listClosedListEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const createClosedListEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: Object.assign({}, Mappers.EntityRoleCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listRegexEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const createRegexEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: Object.assign({}, Mappers.EntityRoleCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listCompositeEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const createCompositeEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: Object.assign({}, Mappers.EntityRoleCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listPatternAnyEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const createPatternAnyEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: Object.assign({}, Mappers.EntityRoleCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listHierarchicalEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const createHierarchicalEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: Object.assign({}, Mappers.EntityRoleCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listCustomPrebuiltEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const createCustomPrebuiltEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: Object.assign({}, Mappers.EntityRoleCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getExplicitListOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExplicitListItem"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addExplicitListItemOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "item",
        mapper: Object.assign({}, Mappers.ExplicitListItemCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getRegexEntityEntityInfoOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.regexEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RegexEntityExtractor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateRegexEntityModelOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.regexEntityId
    ],
    requestBody: {
        parameterPath: "regexEntityUpdateObject",
        mapper: Object.assign({}, Mappers.RegexModelUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteRegexEntityModelOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.regexEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getPatternAnyEntityInfoOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PatternAnyEntityExtractor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updatePatternAnyEntityModelOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "patternAnyUpdateObject",
        mapper: Object.assign({}, Mappers.PatternAnyModelUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deletePatternAnyEntityModelOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: Object.assign({}, Mappers.EntityRoleUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getPrebuiltEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updatePrebuiltEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: Object.assign({}, Mappers.EntityRoleUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deletePrebuiltEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getClosedListEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateClosedListEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: Object.assign({}, Mappers.EntityRoleUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteClosedListEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getRegexEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateRegexEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: Object.assign({}, Mappers.EntityRoleUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteRegexEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getCompositeEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateCompositeEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: Object.assign({}, Mappers.EntityRoleUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteCompositeEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getPatternAnyEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updatePatternAnyEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: Object.assign({}, Mappers.EntityRoleUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deletePatternAnyEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getHierarchicalEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateHierarchicalEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: Object.assign({}, Mappers.EntityRoleUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteHierarchicalEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getCustomEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateCustomPrebuiltEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: Object.assign({}, Mappers.EntityRoleUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteCustomEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getExplicitListItemOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.itemId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ExplicitListItem
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateExplicitListItemOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.itemId
    ],
    requestBody: {
        parameterPath: "item",
        mapper: Object.assign({}, Mappers.ExplicitListItemUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteExplicitListItemOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.itemId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
//# sourceMappingURL=model.js.map