"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("@azure/ms-rest-js");
const Mappers = require("../models/permissionsMappers");
const Parameters = require("../models/parameters");
/** Class representing a Permissions. */
class Permissions {
    /**
     * Create a Permissions.
     * @param {LuisAuthoringContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    list(appId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            options
        }, listOperationSpec, callback);
    }
    add(appId, userToAdd, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            userToAdd,
            options
        }, addOperationSpec, callback);
    }
    deleteMethod(appId, userToDelete, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            userToDelete,
            options
        }, deleteMethodOperationSpec, callback);
    }
    update(appId, collaborators, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            collaborators,
            options
        }, updateOperationSpec, callback);
    }
}
exports.Permissions = Permissions;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/permissions",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UserAccessList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/permissions",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "userToAdd",
        mapper: Object.assign({}, Mappers.UserCollaborator, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/permissions",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "userToDelete",
        mapper: Object.assign({}, Mappers.UserCollaborator, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/permissions",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "collaborators",
        mapper: Object.assign({}, Mappers.CollaboratorsArray, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
//# sourceMappingURL=permissions.js.map