"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("@azure/ms-rest-js");
const Mappers = require("../models/featuresMappers");
const Parameters = require("../models/parameters");
/** Class representing a Features. */
class Features {
    /**
     * Create a Features.
     * @param {LuisAuthoringContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    createPatternFeature(appId, versionId, patternCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            patternCreateObject,
            options
        }, createPatternFeatureOperationSpec, callback);
    }
    listApplicationVersionPatternFeatures(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listApplicationVersionPatternFeaturesOperationSpec, callback);
    }
    addPhraseList(appId, versionId, phraselistCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            phraselistCreateObject,
            options
        }, addPhraseListOperationSpec, callback);
    }
    listPhraseLists(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listPhraseListsOperationSpec, callback);
    }
    list(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, listOperationSpec, callback);
    }
    getPatternFeatureInfo(appId, versionId, patternId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            patternId,
            options
        }, getPatternFeatureInfoOperationSpec, callback);
    }
    updatePatternFeature(appId, versionId, patternId, patternUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            patternId,
            patternUpdateObject,
            options
        }, updatePatternFeatureOperationSpec, callback);
    }
    deletePatternFeature(appId, versionId, patternId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            patternId,
            options
        }, deletePatternFeatureOperationSpec, callback);
    }
    getPhraseList(appId, versionId, phraselistId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            phraselistId,
            options
        }, getPhraseListOperationSpec, callback);
    }
    updatePhraseList(appId, versionId, phraselistId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            phraselistId,
            options
        }, updatePhraseListOperationSpec, callback);
    }
    deletePhraseList(appId, versionId, phraselistId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            phraselistId,
            options
        }, deletePhraseListOperationSpec, callback);
    }
}
exports.Features = Features;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createPatternFeatureOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/patterns",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "patternCreateObject",
        mapper: Object.assign({}, Mappers.PatternCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listApplicationVersionPatternFeaturesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patterns",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PatternFeatureInfo"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addPhraseListOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/phraselists",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "phraselistCreateObject",
        mapper: Object.assign({}, Mappers.PhraselistCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listPhraseListsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/phraselists",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PhraseListFeatureInfo"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/features",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FeaturesResponseObject
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getPatternFeatureInfoOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patterns/{patternId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.patternId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PatternFeatureInfo
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updatePatternFeatureOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/patterns/{patternId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.patternId0
    ],
    requestBody: {
        parameterPath: "patternUpdateObject",
        mapper: Object.assign({}, Mappers.PatternUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deletePatternFeatureOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/patterns/{patternId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.patternId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getPhraseListOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/phraselists/{phraselistId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.phraselistId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PhraseListFeatureInfo
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updatePhraseListOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/phraselists/{phraselistId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.phraselistId
    ],
    requestBody: {
        parameterPath: [
            "options",
            "phraselistUpdateObject"
        ],
        mapper: Mappers.PhraselistUpdateObject
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deletePhraseListOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/phraselists/{phraselistId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.phraselistId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
//# sourceMappingURL=features.js.map