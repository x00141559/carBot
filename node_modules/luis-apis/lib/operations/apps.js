"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("@azure/ms-rest-js");
const Mappers = require("../models/appsMappers");
const Parameters = require("../models/parameters");
/** Class representing a Apps. */
class Apps {
    /**
     * Create a Apps.
     * @param {LuisAuthoringContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    add(applicationCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            applicationCreateObject,
            options
        }, addOperationSpec, callback);
    }
    list(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, listOperationSpec, callback);
    }
    importMethod(luisApp, options, callback) {
        return this.client.sendOperationRequest({
            luisApp,
            options
        }, importMethodOperationSpec, callback);
    }
    listCortanaEndpoints(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, listCortanaEndpointsOperationSpec, callback);
    }
    listDomains(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, listDomainsOperationSpec, callback);
    }
    listUsageScenarios(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, listUsageScenariosOperationSpec, callback);
    }
    listSupportedCultures(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, listSupportedCulturesOperationSpec, callback);
    }
    downloadQueryLogs(appId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            options
        }, downloadQueryLogsOperationSpec, callback);
    }
    get(appId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            options
        }, getOperationSpec, callback);
    }
    update(appId, applicationUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            applicationUpdateObject,
            options
        }, updateOperationSpec, callback);
    }
    deleteMethod(appId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            options
        }, deleteMethodOperationSpec, callback);
    }
    publish(appId, applicationPublishObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            applicationPublishObject,
            options
        }, publishOperationSpec, callback);
    }
    getSettings(appId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            options
        }, getSettingsOperationSpec, callback);
    }
    updateSettings(appId, applicationSettingUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            applicationSettingUpdateObject,
            options
        }, updateSettingsOperationSpec, callback);
    }
    getPublishSettings(appId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            options
        }, getPublishSettingsOperationSpec, callback);
    }
    updatePublishSettings(appId, publishSettingUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            publishSettingUpdateObject,
            options
        }, updatePublishSettingsOperationSpec, callback);
    }
    listEndpoints(appId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            options
        }, listEndpointsOperationSpec, callback);
    }
    listAvailableCustomPrebuiltDomains(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, listAvailableCustomPrebuiltDomainsOperationSpec, callback);
    }
    addCustomPrebuiltDomain(prebuiltDomainCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            prebuiltDomainCreateObject,
            options
        }, addCustomPrebuiltDomainOperationSpec, callback);
    }
    listAvailableCustomPrebuiltDomainsForCulture(culture, options, callback) {
        return this.client.sendOperationRequest({
            culture,
            options
        }, listAvailableCustomPrebuiltDomainsForCultureOperationSpec, callback);
    }
    packagePublishedApplicationAsGzip(appId, slotName, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            slotName,
            options
        }, packagePublishedApplicationAsGzipOperationSpec, callback);
    }
    packageTrainedApplicationAsGzip(appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId,
            versionId,
            options
        }, packageTrainedApplicationAsGzipOperationSpec, callback);
    }
}
exports.Apps = Apps;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const addOperationSpec = {
    httpMethod: "POST",
    path: "apps/",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: "applicationCreateObject",
        mapper: Object.assign({}, Mappers.ApplicationCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listOperationSpec = {
    httpMethod: "GET",
    path: "apps/",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationInfoResponse"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const importMethodOperationSpec = {
    httpMethod: "POST",
    path: "apps/import",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.appName
    ],
    requestBody: {
        parameterPath: "luisApp",
        mapper: Object.assign({}, Mappers.LuisApp, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listCortanaEndpointsOperationSpec = {
    httpMethod: "GET",
    path: "apps/assistants",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PersonalAssistantsResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listDomainsOperationSpec = {
    httpMethod: "GET",
    path: "apps/domains",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listUsageScenariosOperationSpec = {
    httpMethod: "GET",
    path: "apps/usagescenarios",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listSupportedCulturesOperationSpec = {
    httpMethod: "GET",
    path: "apps/cultures",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AvailableCulture"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const downloadQueryLogsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/querylogs",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        default: {}
    },
    serializer
};
const getOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationInfoResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "applicationUpdateObject",
        mapper: Object.assign({}, Mappers.ApplicationUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    queryParameters: [
        Parameters.force
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const publishOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/publish",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "applicationPublishObject",
        mapper: Object.assign({}, Mappers.ApplicationPublishObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.ProductionOrStagingEndpointInfo
        },
        207: {
            bodyMapper: Mappers.ProductionOrStagingEndpointInfo
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getSettingsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/settings",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationSettings
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updateSettingsOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/settings",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "applicationSettingUpdateObject",
        mapper: Object.assign({}, Mappers.ApplicationSettingUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const getPublishSettingsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/publishsettings",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PublishSettings
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const updatePublishSettingsOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/publishsettings",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "publishSettingUpdateObject",
        mapper: Object.assign({}, Mappers.PublishSettingUpdateObject, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listEndpointsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/endpoints",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listAvailableCustomPrebuiltDomainsOperationSpec = {
    httpMethod: "GET",
    path: "apps/customprebuiltdomains",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrebuiltDomain"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const addCustomPrebuiltDomainOperationSpec = {
    httpMethod: "POST",
    path: "apps/customprebuiltdomains",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: "prebuiltDomainCreateObject",
        mapper: Object.assign({}, Mappers.PrebuiltDomainCreateObject, { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const listAvailableCustomPrebuiltDomainsForCultureOperationSpec = {
    httpMethod: "GET",
    path: "apps/customprebuiltdomains/{culture}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.culture
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrebuiltDomain"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const packagePublishedApplicationAsGzipOperationSpec = {
    httpMethod: "GET",
    path: "package/{appId}/slot/{slotName}/gzip",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.slotName
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
const packageTrainedApplicationAsGzipOperationSpec = {
    httpMethod: "GET",
    path: "package/{appId}/versions/{versionId}/gzip",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer
};
//# sourceMappingURL=apps.js.map