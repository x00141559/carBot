/**
 * @module botbuilder-azure
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Storage, StoreItems } from 'botbuilder';
import { CosmosClientOptions } from '@azure/cosmos';
/**
 * Cosmos DB Partitioned Storage Options.
 */
export interface CosmosDbPartitionedStorageOptions {
    /**
     * The CosmosDB endpoint.
     */
    cosmosDbEndpoint: string;
    /**
     * The authentication key for Cosmos DB.
     */
    authKey: string;
    /**
     * The database identifier for Cosmos DB instance.
     */
    databaseId: string;
    /**
     * The container identifier.
     */
    containerId: string;
    /**
     * The options for the CosmosClient.
     */
    cosmosClientOptions?: CosmosClientOptions;
    /**
     * The throughput set when creating the Container. Defaults to 400.
     */
    containerThroughput?: number;
    /**
     * The suffix to be added to every key. See cosmosDbKeyEscape.escapeKey
     *
     * Note: compatibilityMode must be set to 'false' to use a KeySuffix.
     * When KeySuffix is used, keys will NOT be truncated but an exception will
     * be thrown if the key length is longer than allowed by CosmosDb.
     *
     * The keySuffix must contain only valid ComosDb key characters.
     * (e.g. not: '\\', '?', '/', '#', '*')
     */
    keySuffix?: string;
    /**
    * Early version of CosmosDb had a max key length of 255.  Keys longer than
    * this were truncated in cosmosDbKeyEscape.escapeKey.  This remains the default
    * behavior of cosmosDbPartitionedStorage, but can be overridden by setting
    * compatibilityMode to false.
    *
    * compatibilityMode cannot be true if keySuffix is used.
    */
    compatibilityMode?: boolean;
}
/**
 * Implements an CosmosDB based storage provider using partitioning for a bot.
 */
export declare class CosmosDbPartitionedStorage implements Storage {
    private container;
    private readonly cosmosDbStorageOptions;
    private client;
    private compatabilityModePartitionKey;
    /**
     * Initializes a new instance of the <see cref="CosmosDbPartitionedStorage"/> class.
     * using the provided CosmosDB credentials, database ID, and container ID.
     *
     * @param cosmosDbStorageOptions Cosmos DB partitioned storage configuration options.
     */
    constructor(cosmosDbStorageOptions: CosmosDbPartitionedStorageOptions);
    read(keys: string[]): Promise<StoreItems>;
    write(changes: StoreItems): Promise<void>;
    delete(keys: string[]): Promise<void>;
    /**
     * Connects to the CosmosDB database and creates / gets the container.
     */
    initialize(): Promise<void>;
    private getOrCreateContainer;
    private getPartitionKey;
    /**
     * The Cosmos JS SDK doesn't return very descriptive errors and not all errors contain a body.
     * This provides more detailed errors and err['message'] prevents ReferenceError
     */
    private throwInformativeError;
}
//# sourceMappingURL=cosmosDbPartitionedStorage.d.ts.map